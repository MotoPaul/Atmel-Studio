
SamplePrj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000644  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000708  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000da9  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ad8  00000000  00000000  00001599  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000746  00000000  00000000  00002071  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  000027b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000576  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043f  00000000  00000000  00002f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000033a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  c4:	0c 94 20 03 	jmp	0x640	; 0x640 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	system_init();
  d4:	0e 94 07 03 	call	0x60e	; 0x60e <system_init>
}
  d8:	00 00       	nop
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	00 d0       	rcall	.+0      	; 0xe6 <PORTD_set_pin_level+0x6>
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	88 23       	and	r24, r24
  f2:	a9 f0       	breq	.+42     	; 0x11e <PORTD_set_pin_level+0x3e>
		PORTD |= 1 << pin;
  f4:	8b e2       	ldi	r24, 0x2B	; 43
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	2b e2       	ldi	r18, 0x2B	; 43
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	20 81       	ld	r18, Z
 100:	62 2f       	mov	r22, r18
 102:	29 81       	ldd	r18, Y+1	; 0x01
 104:	42 2f       	mov	r20, r18
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <PORTD_set_pin_level+0x32>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	4a 95       	dec	r20
 114:	e2 f7       	brpl	.-8      	; 0x10e <PORTD_set_pin_level+0x2e>
 116:	26 2b       	or	r18, r22
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
	} else {
		PORTD &= ~(1 << pin);
	}
}
 11c:	15 c0       	rjmp	.+42     	; 0x148 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 11e:	8b e2       	ldi	r24, 0x2B	; 43
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	2b e2       	ldi	r18, 0x2B	; 43
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	f9 01       	movw	r30, r18
 128:	20 81       	ld	r18, Z
 12a:	62 2f       	mov	r22, r18
 12c:	29 81       	ldd	r18, Y+1	; 0x01
 12e:	42 2f       	mov	r20, r18
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <PORTD_set_pin_level+0x5c>
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	4a 95       	dec	r20
 13e:	e2 f7       	brpl	.-8      	; 0x138 <PORTD_set_pin_level+0x58>
 140:	20 95       	com	r18
 142:	26 23       	and	r18, r22
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
	}
}
 148:	00 00       	nop
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <MyGpio_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void MyGpio_set_level(const bool level)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(7, level);
 160:	69 81       	ldd	r22, Y+1	; 0x01
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	0e 94 70 00 	call	0xe0	; 0xe0 <PORTD_set_pin_level>
}
 168:	00 00       	nop
 16a:	0f 90       	pop	r0
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <main>:
*
* @note
*
****************************************************************************/
int main(void)
{   
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
	
	/* Initializes MCU, drivers and middleware */
	Delay();
 17a:	0e 94 ce 00 	call	0x19c	; 0x19c <Delay>
	atmel_start_init();
 17e:	0e 94 66 00 	call	0xcc	; 0xcc <atmel_start_init>
    Delay();
 182:	0e 94 ce 00 	call	0x19c	; 0x19c <Delay>
	/* Replace with your application code */
	while(1)
	{
      MyGpio_set_level(true);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 aa 00 	call	0x154	; 0x154 <MyGpio_set_level>
	  Delay();
 18c:	0e 94 ce 00 	call	0x19c	; 0x19c <Delay>
	  MyGpio_set_level(false);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 aa 00 	call	0x154	; 0x154 <MyGpio_set_level>
	  Delay();
 196:	0e 94 ce 00 	call	0x19c	; 0x19c <Delay>
	}
 19a:	f5 cf       	rjmp	.-22     	; 0x186 <main+0x14>

0000019c <Delay>:
*
* @note
*
****************************************************************************/
void Delay(void)
{
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <Delay+0x6>
 1a2:	00 d0       	rcall	.+0      	; 0x1a4 <Delay+0x8>
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
   volatile int i;
   for(int i=0;i<__DELAY_COUNT;++i)
 1a8:	1a 82       	std	Y+2, r1	; 0x02
 1aa:	19 82       	std	Y+1, r1	; 0x01
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <Delay+0x1c>
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	9a 81       	ldd	r25, Y+2	; 0x02
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	89 83       	std	Y+1, r24	; 0x01
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	9a 81       	ldd	r25, Y+2	; 0x02
 1bc:	80 32       	cpi	r24, 0x20	; 32
 1be:	9e 44       	sbci	r25, 0x4E	; 78
 1c0:	b4 f3       	brlt	.-20     	; 0x1ae <Delay+0x12>
      ;
 1c2:	00 00       	nop
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <PORTB_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <PORTB_set_port_dir+0x6>
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	89 83       	std	Y+1, r24	; 0x01
 1de:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	88 2f       	mov	r24, r24
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 05       	cpc	r25, r1
 1ea:	99 f0       	breq	.+38     	; 0x212 <PORTB_set_port_dir+0x40>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	91 05       	cpc	r25, r1
 1f0:	d9 f0       	breq	.+54     	; 0x228 <PORTB_set_port_dir+0x56>
 1f2:	89 2b       	or	r24, r25
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <PORTB_set_port_dir+0x26>
		DDRB &= ~mask;

		PORTB |= mask;
		break;
	default:
		break;
 1f6:	2f c0       	rjmp	.+94     	; 0x256 <PORTB_set_port_dir+0x84>
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~mask;
 1f8:	84 e2       	ldi	r24, 0x24	; 36
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	24 e2       	ldi	r18, 0x24	; 36
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	f9 01       	movw	r30, r18
 202:	20 81       	ld	r18, Z
 204:	32 2f       	mov	r19, r18
 206:	29 81       	ldd	r18, Y+1	; 0x01
 208:	20 95       	com	r18
 20a:	23 23       	and	r18, r19
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
		break;
 210:	22 c0       	rjmp	.+68     	; 0x256 <PORTB_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRB |= mask;
 212:	84 e2       	ldi	r24, 0x24	; 36
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	24 e2       	ldi	r18, 0x24	; 36
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	30 81       	ld	r19, Z
 21e:	29 81       	ldd	r18, Y+1	; 0x01
 220:	23 2b       	or	r18, r19
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
		break;
 226:	17 c0       	rjmp	.+46     	; 0x256 <PORTB_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 228:	84 e2       	ldi	r24, 0x24	; 36
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	24 e2       	ldi	r18, 0x24	; 36
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	f9 01       	movw	r30, r18
 232:	20 81       	ld	r18, Z
 234:	32 2f       	mov	r19, r18
 236:	29 81       	ldd	r18, Y+1	; 0x01
 238:	20 95       	com	r18
 23a:	23 23       	and	r18, r19
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18

		PORTB |= mask;
 240:	85 e2       	ldi	r24, 0x25	; 37
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	25 e2       	ldi	r18, 0x25	; 37
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	f9 01       	movw	r30, r18
 24a:	30 81       	ld	r19, Z
 24c:	29 81       	ldd	r18, Y+1	; 0x01
 24e:	23 2b       	or	r18, r19
 250:	fc 01       	movw	r30, r24
 252:	20 83       	st	Z, r18
		break;
 254:	00 00       	nop
	default:
		break;
	}
}
 256:	00 00       	nop
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <PORTC_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	00 d0       	rcall	.+0      	; 0x268 <PORTC_set_port_dir+0x6>
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	89 83       	std	Y+1, r24	; 0x01
 26e:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	88 2f       	mov	r24, r24
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	91 05       	cpc	r25, r1
 27a:	99 f0       	breq	.+38     	; 0x2a2 <PORTC_set_port_dir+0x40>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	91 05       	cpc	r25, r1
 280:	d9 f0       	breq	.+54     	; 0x2b8 <PORTC_set_port_dir+0x56>
 282:	89 2b       	or	r24, r25
 284:	09 f0       	breq	.+2      	; 0x288 <PORTC_set_port_dir+0x26>
		DDRC &= ~mask;

		PORTC |= mask;
		break;
	default:
		break;
 286:	2f c0       	rjmp	.+94     	; 0x2e6 <PORTC_set_port_dir+0x84>
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~mask;
 288:	87 e2       	ldi	r24, 0x27	; 39
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	27 e2       	ldi	r18, 0x27	; 39
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	f9 01       	movw	r30, r18
 292:	20 81       	ld	r18, Z
 294:	32 2f       	mov	r19, r18
 296:	29 81       	ldd	r18, Y+1	; 0x01
 298:	20 95       	com	r18
 29a:	23 23       	and	r18, r19
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
		break;
 2a0:	22 c0       	rjmp	.+68     	; 0x2e6 <PORTC_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRC |= mask;
 2a2:	87 e2       	ldi	r24, 0x27	; 39
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	27 e2       	ldi	r18, 0x27	; 39
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	f9 01       	movw	r30, r18
 2ac:	30 81       	ld	r19, Z
 2ae:	29 81       	ldd	r18, Y+1	; 0x01
 2b0:	23 2b       	or	r18, r19
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
		break;
 2b6:	17 c0       	rjmp	.+46     	; 0x2e6 <PORTC_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 2b8:	87 e2       	ldi	r24, 0x27	; 39
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	27 e2       	ldi	r18, 0x27	; 39
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	f9 01       	movw	r30, r18
 2c2:	20 81       	ld	r18, Z
 2c4:	32 2f       	mov	r19, r18
 2c6:	29 81       	ldd	r18, Y+1	; 0x01
 2c8:	20 95       	com	r18
 2ca:	23 23       	and	r18, r19
 2cc:	fc 01       	movw	r30, r24
 2ce:	20 83       	st	Z, r18

		PORTC |= mask;
 2d0:	88 e2       	ldi	r24, 0x28	; 40
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	28 e2       	ldi	r18, 0x28	; 40
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	f9 01       	movw	r30, r18
 2da:	30 81       	ld	r19, Z
 2dc:	29 81       	ldd	r18, Y+1	; 0x01
 2de:	23 2b       	or	r18, r19
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
		break;
 2e4:	00 00       	nop
	default:
		break;
	}
}
 2e6:	00 00       	nop
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <PORTD_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <PORTD_set_port_dir+0x6>
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	89 83       	std	Y+1, r24	; 0x01
 2fe:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	88 2f       	mov	r24, r24
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	91 05       	cpc	r25, r1
 30a:	99 f0       	breq	.+38     	; 0x332 <PORTD_set_port_dir+0x40>
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	91 05       	cpc	r25, r1
 310:	d9 f0       	breq	.+54     	; 0x348 <PORTD_set_port_dir+0x56>
 312:	89 2b       	or	r24, r25
 314:	09 f0       	breq	.+2      	; 0x318 <PORTD_set_port_dir+0x26>
		DDRD &= ~mask;

		PORTD |= mask;
		break;
	default:
		break;
 316:	2f c0       	rjmp	.+94     	; 0x376 <PORTD_set_port_dir+0x84>
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~mask;
 318:	8a e2       	ldi	r24, 0x2A	; 42
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	2a e2       	ldi	r18, 0x2A	; 42
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	f9 01       	movw	r30, r18
 322:	20 81       	ld	r18, Z
 324:	32 2f       	mov	r19, r18
 326:	29 81       	ldd	r18, Y+1	; 0x01
 328:	20 95       	com	r18
 32a:	23 23       	and	r18, r19
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
		break;
 330:	22 c0       	rjmp	.+68     	; 0x376 <PORTD_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRD |= mask;
 332:	8a e2       	ldi	r24, 0x2A	; 42
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	2a e2       	ldi	r18, 0x2A	; 42
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	f9 01       	movw	r30, r18
 33c:	30 81       	ld	r19, Z
 33e:	29 81       	ldd	r18, Y+1	; 0x01
 340:	23 2b       	or	r18, r19
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
		break;
 346:	17 c0       	rjmp	.+46     	; 0x376 <PORTD_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 348:	8a e2       	ldi	r24, 0x2A	; 42
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	2a e2       	ldi	r18, 0x2A	; 42
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	f9 01       	movw	r30, r18
 352:	20 81       	ld	r18, Z
 354:	32 2f       	mov	r19, r18
 356:	29 81       	ldd	r18, Y+1	; 0x01
 358:	20 95       	com	r18
 35a:	23 23       	and	r18, r19
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18

		PORTD |= mask;
 360:	8b e2       	ldi	r24, 0x2B	; 43
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	2b e2       	ldi	r18, 0x2B	; 43
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	f9 01       	movw	r30, r18
 36a:	30 81       	ld	r19, Z
 36c:	29 81       	ldd	r18, Y+1	; 0x01
 36e:	23 2b       	or	r18, r19
 370:	fc 01       	movw	r30, r24
 372:	20 83       	st	Z, r18
		break;
 374:	00 00       	nop
	default:
		break;
	}
}
 376:	00 00       	nop
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	00 d0       	rcall	.+0      	; 0x388 <PORTD_set_pin_dir+0x6>
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	89 83       	std	Y+1, r24	; 0x01
 38e:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	88 2f       	mov	r24, r24
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	91 05       	cpc	r25, r1
 39a:	e1 f0       	breq	.+56     	; 0x3d4 <PORTD_set_pin_dir+0x52>
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	91 05       	cpc	r25, r1
 3a0:	71 f1       	breq	.+92     	; 0x3fe <PORTD_set_pin_dir+0x7c>
 3a2:	89 2b       	or	r24, r25
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <PORTD_set_pin_dir+0x26>
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
		break;
	default:
		break;
 3a6:	55 c0       	rjmp	.+170    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 3a8:	8a e2       	ldi	r24, 0x2A	; 42
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	2a e2       	ldi	r18, 0x2A	; 42
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	f9 01       	movw	r30, r18
 3b2:	20 81       	ld	r18, Z
 3b4:	62 2f       	mov	r22, r18
 3b6:	29 81       	ldd	r18, Y+1	; 0x01
 3b8:	42 2f       	mov	r20, r18
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	21 e0       	ldi	r18, 0x01	; 1
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <PORTD_set_pin_dir+0x44>
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	4a 95       	dec	r20
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <PORTD_set_pin_dir+0x40>
 3ca:	20 95       	com	r18
 3cc:	26 23       	and	r18, r22
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
		break;
 3d2:	3f c0       	rjmp	.+126    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 3d4:	8a e2       	ldi	r24, 0x2A	; 42
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	2a e2       	ldi	r18, 0x2A	; 42
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	f9 01       	movw	r30, r18
 3de:	20 81       	ld	r18, Z
 3e0:	62 2f       	mov	r22, r18
 3e2:	29 81       	ldd	r18, Y+1	; 0x01
 3e4:	42 2f       	mov	r20, r18
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <PORTD_set_pin_dir+0x70>
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	4a 95       	dec	r20
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <PORTD_set_pin_dir+0x6c>
 3f6:	26 2b       	or	r18, r22
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
		break;
 3fc:	2a c0       	rjmp	.+84     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
	case PORT_DIR_OFF:
		DDRD &= ~(1 << pin);
 3fe:	8a e2       	ldi	r24, 0x2A	; 42
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	2a e2       	ldi	r18, 0x2A	; 42
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	f9 01       	movw	r30, r18
 408:	20 81       	ld	r18, Z
 40a:	62 2f       	mov	r22, r18
 40c:	29 81       	ldd	r18, Y+1	; 0x01
 40e:	42 2f       	mov	r20, r18
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	22 0f       	add	r18, r18
 41a:	33 1f       	adc	r19, r19
 41c:	4a 95       	dec	r20
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	20 95       	com	r18
 422:	26 23       	and	r18, r22
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18

		PORTD |= 1 << pin;
 428:	8b e2       	ldi	r24, 0x2B	; 43
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	2b e2       	ldi	r18, 0x2B	; 43
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	f9 01       	movw	r30, r18
 432:	20 81       	ld	r18, Z
 434:	62 2f       	mov	r22, r18
 436:	29 81       	ldd	r18, Y+1	; 0x01
 438:	42 2f       	mov	r20, r18
 43a:	50 e0       	ldi	r21, 0x00	; 0
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	4a 95       	dec	r20
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	26 2b       	or	r18, r22
 44c:	fc 01       	movw	r30, r24
 44e:	20 83       	st	Z, r18
		break;
 450:	00 00       	nop
	default:
		break;
	}
}
 452:	00 00       	nop
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <PORTD_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	00 d0       	rcall	.+0      	; 0x464 <PORTD_set_pin_level+0x6>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	89 83       	std	Y+1, r24	; 0x01
 46a:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
 46c:	8a 81       	ldd	r24, Y+2	; 0x02
 46e:	88 23       	and	r24, r24
 470:	a9 f0       	breq	.+42     	; 0x49c <PORTD_set_pin_level+0x3e>
		PORTD |= 1 << pin;
 472:	8b e2       	ldi	r24, 0x2B	; 43
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	2b e2       	ldi	r18, 0x2B	; 43
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	f9 01       	movw	r30, r18
 47c:	20 81       	ld	r18, Z
 47e:	62 2f       	mov	r22, r18
 480:	29 81       	ldd	r18, Y+1	; 0x01
 482:	42 2f       	mov	r20, r18
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <PORTD_set_pin_level+0x32>
 48c:	22 0f       	add	r18, r18
 48e:	33 1f       	adc	r19, r19
 490:	4a 95       	dec	r20
 492:	e2 f7       	brpl	.-8      	; 0x48c <PORTD_set_pin_level+0x2e>
 494:	26 2b       	or	r18, r22
 496:	fc 01       	movw	r30, r24
 498:	20 83       	st	Z, r18
	} else {
		PORTD &= ~(1 << pin);
	}
}
 49a:	15 c0       	rjmp	.+42     	; 0x4c6 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 49c:	8b e2       	ldi	r24, 0x2B	; 43
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	2b e2       	ldi	r18, 0x2B	; 43
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	f9 01       	movw	r30, r18
 4a6:	20 81       	ld	r18, Z
 4a8:	62 2f       	mov	r22, r18
 4aa:	29 81       	ldd	r18, Y+1	; 0x01
 4ac:	42 2f       	mov	r20, r18
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	21 e0       	ldi	r18, 0x01	; 1
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <PORTD_set_pin_level+0x5c>
 4b6:	22 0f       	add	r18, r18
 4b8:	33 1f       	adc	r19, r19
 4ba:	4a 95       	dec	r20
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <PORTD_set_pin_level+0x58>
 4be:	20 95       	com	r18
 4c0:	26 23       	and	r18, r22
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18
	}
}
 4c6:	00 00       	nop
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <PORTE_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTE_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	00 d0       	rcall	.+0      	; 0x4d8 <PORTE_set_port_dir+0x6>
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
 4dc:	89 83       	std	Y+1, r24	; 0x01
 4de:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	88 2f       	mov	r24, r24
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	91 05       	cpc	r25, r1
 4ea:	99 f0       	breq	.+38     	; 0x512 <PORTE_set_port_dir+0x40>
 4ec:	82 30       	cpi	r24, 0x02	; 2
 4ee:	91 05       	cpc	r25, r1
 4f0:	d9 f0       	breq	.+54     	; 0x528 <PORTE_set_port_dir+0x56>
 4f2:	89 2b       	or	r24, r25
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <PORTE_set_port_dir+0x26>
		DDRE &= ~mask;

		PORTE |= mask;
		break;
	default:
		break;
 4f6:	2f c0       	rjmp	.+94     	; 0x556 <PORTE_set_port_dir+0x84>
 */
static inline void PORTE_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~mask;
 4f8:	8d e2       	ldi	r24, 0x2D	; 45
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	2d e2       	ldi	r18, 0x2D	; 45
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	f9 01       	movw	r30, r18
 502:	20 81       	ld	r18, Z
 504:	32 2f       	mov	r19, r18
 506:	29 81       	ldd	r18, Y+1	; 0x01
 508:	20 95       	com	r18
 50a:	23 23       	and	r18, r19
 50c:	fc 01       	movw	r30, r24
 50e:	20 83       	st	Z, r18
		break;
 510:	22 c0       	rjmp	.+68     	; 0x556 <PORTE_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRE |= mask;
 512:	8d e2       	ldi	r24, 0x2D	; 45
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	2d e2       	ldi	r18, 0x2D	; 45
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	f9 01       	movw	r30, r18
 51c:	30 81       	ld	r19, Z
 51e:	29 81       	ldd	r18, Y+1	; 0x01
 520:	23 2b       	or	r18, r19
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18
		break;
 526:	17 c0       	rjmp	.+46     	; 0x556 <PORTE_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 528:	8d e2       	ldi	r24, 0x2D	; 45
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	2d e2       	ldi	r18, 0x2D	; 45
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	f9 01       	movw	r30, r18
 532:	20 81       	ld	r18, Z
 534:	32 2f       	mov	r19, r18
 536:	29 81       	ldd	r18, Y+1	; 0x01
 538:	20 95       	com	r18
 53a:	23 23       	and	r18, r19
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18

		PORTE |= mask;
 540:	8e e2       	ldi	r24, 0x2E	; 46
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	2e e2       	ldi	r18, 0x2E	; 46
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	f9 01       	movw	r30, r18
 54a:	30 81       	ld	r19, Z
 54c:	29 81       	ldd	r18, Y+1	; 0x01
 54e:	23 2b       	or	r18, r19
 550:	fc 01       	movw	r30, r24
 552:	20 83       	st	Z, r18
		break;
 554:	00 00       	nop
	default:
		break;
	}
}
 556:	00 00       	nop
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <MyGpio_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void MyGpio_set_dir(const enum port_dir dir)
{
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	1f 92       	push	r1
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(7, dir);
 56e:	69 81       	ldd	r22, Y+1	; 0x01
 570:	87 e0       	ldi	r24, 0x07	; 7
 572:	0e 94 c1 01 	call	0x382	; 0x382 <PORTD_set_pin_dir>
}
 576:	00 00       	nop
 578:	0f 90       	pop	r0
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <MyGpio_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void MyGpio_set_level(const bool level)
{
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	1f 92       	push	r1
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(7, level);
 58c:	69 81       	ldd	r22, Y+1	; 0x01
 58e:	87 e0       	ldi	r24, 0x07	; 7
 590:	0e 94 2f 02 	call	0x45e	; 0x45e <PORTD_set_pin_level>
}
 594:	00 00       	nop
 596:	0f 90       	pop	r0
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <sysctrl_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	cd b7       	in	r28, 0x3d	; 61
 5a4:	de b7       	in	r29, 0x3e	; 62
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 5a6:	40 e0       	ldi	r20, 0x00	; 0
 5a8:	60 e8       	ldi	r22, 0x80	; 128
 5aa:	81 e6       	ldi	r24, 0x61	; 97
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 19 03 	call	0x632	; 0x632 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 5b2:	83 e5       	ldi	r24, 0x53	; 83
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	fc 01       	movw	r30, r24
 5b8:	10 82       	st	Z, r1
	       (0 << SE);

	MCUCR = (0 << PUD);
 5ba:	85 e5       	ldi	r24, 0x55	; 85
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	fc 01       	movw	r30, r24
 5c0:	10 82       	st	Z, r1

	return 0;
 5c2:	80 e0       	ldi	r24, 0x00	; 0
}
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

000005ca <mcu_init>:
#define MCU_RESET_CAUSE_EXT (1 << EXTRF)
#define MCU_RESET_CAUSE_BOR (1 << BORF)
#define MCU_RESET_CAUSE_WDT (1 << WDRF)

static inline void mcu_init(void)
{
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 5d2:	85 e6       	ldi	r24, 0x65	; 101
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	2d e3       	ldi	r18, 0x3D	; 61
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 5dc:	84 e6       	ldi	r24, 0x64	; 100
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	2f ef       	ldi	r18, 0xFF	; 255
 5e2:	fc 01       	movw	r30, r24
 5e4:	20 83       	st	Z, r18
	       | (1 << PRADC) | (1 << PRSPI0);

	/* Set all pins to low power mode */
	PORTB_set_port_dir(0xff, PORT_DIR_OFF);
 5e6:	62 e0       	ldi	r22, 0x02	; 2
 5e8:	8f ef       	ldi	r24, 0xFF	; 255
 5ea:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <PORTB_set_port_dir>
	PORTC_set_port_dir(0x7f, PORT_DIR_OFF);
 5ee:	62 e0       	ldi	r22, 0x02	; 2
 5f0:	8f e7       	ldi	r24, 0x7F	; 127
 5f2:	0e 94 31 01 	call	0x262	; 0x262 <PORTC_set_port_dir>
	PORTD_set_port_dir(0xff, PORT_DIR_OFF);
 5f6:	62 e0       	ldi	r22, 0x02	; 2
 5f8:	8f ef       	ldi	r24, 0xFF	; 255
 5fa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PORTD_set_port_dir>
	PORTE_set_port_dir(0x0f, PORT_DIR_OFF);
 5fe:	62 e0       	ldi	r22, 0x02	; 2
 600:	8f e0       	ldi	r24, 0x0F	; 15
 602:	0e 94 69 02 	call	0x4d2	; 0x4d2 <PORTE_set_port_dir>
}
 606:	00 00       	nop
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 616:	0e 94 e5 02 	call	0x5ca	; 0x5ca <mcu_init>

	/* PORT setting on PD7 */

	// Set pin direction to output
	MyGpio_set_dir(PORT_DIR_OUT);
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	0e 94 b1 02 	call	0x562	; 0x562 <MyGpio_set_dir>

	MyGpio_set_level(
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	0e 94 c0 02 	call	0x580	; 0x580 <MyGpio_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	sysctrl_init();
 626:	0e 94 cf 02 	call	0x59e	; 0x59e <sysctrl_init>
}
 62a:	00 00       	nop
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

00000632 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 632:	2f b7       	in	r18, 0x3f	; 63
	cli
 634:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 636:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 638:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 63a:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 63c:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 63e:	08 95       	ret

00000640 <_exit>:
 640:	f8 94       	cli

00000642 <__stop_program>:
 642:	ff cf       	rjmp	.-2      	; 0x642 <__stop_program>
