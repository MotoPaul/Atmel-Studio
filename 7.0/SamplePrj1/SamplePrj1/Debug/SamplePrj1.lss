
SamplePrj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000086a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000816  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000008e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ea3  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000af5  00000000  00000000  0000189b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000832  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002fc  00000000  00000000  00002bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000063e  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d5  00000000  00000000  000034fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003ad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  c4:	0c 94 09 04 	jmp	0x812	; 0x812 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	system_init();
  d4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <system_init>
}
  d8:	00 00       	nop
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <PORTB_get_pin_level>:
 * Reads the level on a pin connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	1f 92       	push	r1
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	89 83       	std	Y+1, r24	; 0x01
	return PINB & (1 << pin);
  ec:	83 e2       	ldi	r24, 0x23	; 35
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	80 81       	ld	r24, Z
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	48 2f       	mov	r20, r24
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <PORTB_get_pin_level+0x28>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	4a 95       	dec	r20
 10a:	e2 f7       	brpl	.-8      	; 0x104 <PORTB_get_pin_level+0x24>
 10c:	82 23       	and	r24, r18
 10e:	93 23       	and	r25, r19
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	89 2b       	or	r24, r25
 114:	09 f4       	brne	.+2      	; 0x118 <PORTB_get_pin_level+0x38>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	82 2f       	mov	r24, r18
}
 11a:	0f 90       	pop	r0
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <PORTD_toggle_pin_level>:
 * Toggle the pin levels on pin
 *
 * \param[in] pin       The pin number for device
 */
static inline void PORTD_toggle_pin_level(const uint8_t pin)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	1f 92       	push	r1
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	89 83       	std	Y+1, r24	; 0x01
	PIND = 1 << pin;
 12e:	89 e2       	ldi	r24, 0x29	; 41
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	29 81       	ldd	r18, Y+1	; 0x01
 134:	42 2f       	mov	r20, r18
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <PORTD_toggle_pin_level+0x20>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	4a 95       	dec	r20
 144:	e2 f7       	brpl	.-8      	; 0x13e <PORTD_toggle_pin_level+0x1c>
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
}
 14a:	00 00       	nop
 14c:	0f 90       	pop	r0
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <Button_get_level>:
 * \brief Get level on Button
 *
 * Reads the level on a pin
 */
static inline bool Button_get_level()
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
	return PORTB_get_pin_level(7);
 15c:	87 e0       	ldi	r24, 0x07	; 7
 15e:	0e 94 70 00 	call	0xe0	; 0xe0 <PORTB_get_pin_level>
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <MyGpio_toggle_level>:
 * \brief Toggle output level on MyGpio
 *
 * Toggle the pin level
 */
static inline void MyGpio_toggle_level()
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(7);
 170:	87 e0       	ldi	r24, 0x07	; 7
 172:	0e 94 91 00 	call	0x122	; 0x122 <PORTD_toggle_pin_level>
}
 176:	00 00       	nop
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <main>:
*
* @note
*
****************************************************************************/
int main(void)
{   
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
	
	/* Initializes MCU, drivers and middleware */
	Delay();
 186:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Delay>
	atmel_start_init();
 18a:	0e 94 66 00 	call	0xcc	; 0xcc <atmel_start_init>
    Delay();
 18e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Delay>
      //MyGpio_set_level(true);
	  //Delay();
	  //MyGpio_set_level(false);
	  //Delay();
	  
	  if( Button_get_level()==false )
 192:	0e 94 aa 00 	call	0x154	; 0x154 <Button_get_level>
 196:	98 2f       	mov	r25, r24
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	89 27       	eor	r24, r25
 19c:	88 23       	and	r24, r24
 19e:	c9 f3       	breq	.-14     	; 0x192 <main+0x14>
	     MyGpio_toggle_level();
 1a0:	0e 94 b4 00 	call	0x168	; 0x168 <MyGpio_toggle_level>
	    
	}
 1a4:	f6 cf       	rjmp	.-20     	; 0x192 <main+0x14>

000001a6 <Delay>:
*
* @note
*
****************************************************************************/
void Delay(void)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <Delay+0x6>
 1ac:	00 d0       	rcall	.+0      	; 0x1ae <Delay+0x8>
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
   volatile int i;
   for(int i=0;i<__DELAY_COUNT;++i)
 1b2:	1a 82       	std	Y+2, r1	; 0x02
 1b4:	19 82       	std	Y+1, r1	; 0x01
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <Delay+0x1c>
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	9a 81       	ldd	r25, Y+2	; 0x02
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	9a 83       	std	Y+2, r25	; 0x02
 1c0:	89 83       	std	Y+1, r24	; 0x01
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	80 32       	cpi	r24, 0x20	; 32
 1c8:	9e 44       	sbci	r25, 0x4E	; 78
 1ca:	b4 f3       	brlt	.-20     	; 0x1b8 <Delay+0x12>
      ;
 1cc:	00 00       	nop
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <PORTB_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number in PORTB
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <PORTB_set_pin_pull_mode+0x6>
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	89 83       	std	Y+1, r24	; 0x01
 1e8:	6a 83       	std	Y+2, r22	; 0x02

	if (pull_mode == PORT_PULL_UP) {
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	51 f5       	brne	.+84     	; 0x244 <PORTB_set_pin_pull_mode+0x68>

		DDRB &= ~(1 << pin);
 1f0:	84 e2       	ldi	r24, 0x24	; 36
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	24 e2       	ldi	r18, 0x24	; 36
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	f9 01       	movw	r30, r18
 1fa:	20 81       	ld	r18, Z
 1fc:	62 2f       	mov	r22, r18
 1fe:	29 81       	ldd	r18, Y+1	; 0x01
 200:	42 2f       	mov	r20, r18
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <PORTB_set_pin_pull_mode+0x32>
 20a:	22 0f       	add	r18, r18
 20c:	33 1f       	adc	r19, r19
 20e:	4a 95       	dec	r20
 210:	e2 f7       	brpl	.-8      	; 0x20a <PORTB_set_pin_pull_mode+0x2e>
 212:	20 95       	com	r18
 214:	26 23       	and	r18, r22
 216:	fc 01       	movw	r30, r24
 218:	20 83       	st	Z, r18

		PORTB |= 1 << pin;
 21a:	85 e2       	ldi	r24, 0x25	; 37
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	25 e2       	ldi	r18, 0x25	; 37
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	f9 01       	movw	r30, r18
 224:	20 81       	ld	r18, Z
 226:	62 2f       	mov	r22, r18
 228:	29 81       	ldd	r18, Y+1	; 0x01
 22a:	42 2f       	mov	r20, r18
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <PORTB_set_pin_pull_mode+0x5c>
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	4a 95       	dec	r20
 23a:	e2 f7       	brpl	.-8      	; 0x234 <PORTB_set_pin_pull_mode+0x58>
 23c:	26 2b       	or	r18, r22
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
	}
}
 242:	18 c0       	rjmp	.+48     	; 0x274 <PORTB_set_pin_pull_mode+0x98>
	if (pull_mode == PORT_PULL_UP) {

		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	88 23       	and	r24, r24
 248:	a9 f4       	brne	.+42     	; 0x274 <PORTB_set_pin_pull_mode+0x98>

		PORTB &= ~(1 << pin);
 24a:	85 e2       	ldi	r24, 0x25	; 37
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	25 e2       	ldi	r18, 0x25	; 37
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	f9 01       	movw	r30, r18
 254:	20 81       	ld	r18, Z
 256:	62 2f       	mov	r22, r18
 258:	29 81       	ldd	r18, Y+1	; 0x01
 25a:	42 2f       	mov	r20, r18
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	21 e0       	ldi	r18, 0x01	; 1
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <PORTB_set_pin_pull_mode+0x8c>
 264:	22 0f       	add	r18, r18
 266:	33 1f       	adc	r19, r19
 268:	4a 95       	dec	r20
 26a:	e2 f7       	brpl	.-8      	; 0x264 <PORTB_set_pin_pull_mode+0x88>
 26c:	20 95       	com	r18
 26e:	26 23       	and	r18, r22
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
	}
}
 274:	00 00       	nop
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <PORTB_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	00 d0       	rcall	.+0      	; 0x286 <PORTB_set_port_dir+0x6>
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	89 83       	std	Y+1, r24	; 0x01
 28c:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	88 2f       	mov	r24, r24
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	91 05       	cpc	r25, r1
 298:	99 f0       	breq	.+38     	; 0x2c0 <PORTB_set_port_dir+0x40>
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	91 05       	cpc	r25, r1
 29e:	d9 f0       	breq	.+54     	; 0x2d6 <PORTB_set_port_dir+0x56>
 2a0:	89 2b       	or	r24, r25
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <PORTB_set_port_dir+0x26>
		DDRB &= ~mask;

		PORTB |= mask;
		break;
	default:
		break;
 2a4:	2f c0       	rjmp	.+94     	; 0x304 <PORTB_set_port_dir+0x84>
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~mask;
 2a6:	84 e2       	ldi	r24, 0x24	; 36
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	24 e2       	ldi	r18, 0x24	; 36
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	f9 01       	movw	r30, r18
 2b0:	20 81       	ld	r18, Z
 2b2:	32 2f       	mov	r19, r18
 2b4:	29 81       	ldd	r18, Y+1	; 0x01
 2b6:	20 95       	com	r18
 2b8:	23 23       	and	r18, r19
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
		break;
 2be:	22 c0       	rjmp	.+68     	; 0x304 <PORTB_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRB |= mask;
 2c0:	84 e2       	ldi	r24, 0x24	; 36
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	24 e2       	ldi	r18, 0x24	; 36
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	f9 01       	movw	r30, r18
 2ca:	30 81       	ld	r19, Z
 2cc:	29 81       	ldd	r18, Y+1	; 0x01
 2ce:	23 2b       	or	r18, r19
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
		break;
 2d4:	17 c0       	rjmp	.+46     	; 0x304 <PORTB_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 2d6:	84 e2       	ldi	r24, 0x24	; 36
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	24 e2       	ldi	r18, 0x24	; 36
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	f9 01       	movw	r30, r18
 2e0:	20 81       	ld	r18, Z
 2e2:	32 2f       	mov	r19, r18
 2e4:	29 81       	ldd	r18, Y+1	; 0x01
 2e6:	20 95       	com	r18
 2e8:	23 23       	and	r18, r19
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18

		PORTB |= mask;
 2ee:	85 e2       	ldi	r24, 0x25	; 37
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	25 e2       	ldi	r18, 0x25	; 37
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	f9 01       	movw	r30, r18
 2f8:	30 81       	ld	r19, Z
 2fa:	29 81       	ldd	r18, Y+1	; 0x01
 2fc:	23 2b       	or	r18, r19
 2fe:	fc 01       	movw	r30, r24
 300:	20 83       	st	Z, r18
		break;
 302:	00 00       	nop
	default:
		break;
	}
}
 304:	00 00       	nop
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <PORTB_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	00 d0       	rcall	.+0      	; 0x316 <PORTB_set_pin_dir+0x6>
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	89 83       	std	Y+1, r24	; 0x01
 31c:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	88 2f       	mov	r24, r24
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	91 05       	cpc	r25, r1
 328:	e1 f0       	breq	.+56     	; 0x362 <PORTB_set_pin_dir+0x52>
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	91 05       	cpc	r25, r1
 32e:	71 f1       	breq	.+92     	; 0x38c <PORTB_set_pin_dir+0x7c>
 330:	89 2b       	or	r24, r25
 332:	09 f0       	breq	.+2      	; 0x336 <PORTB_set_pin_dir+0x26>
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
		break;
	default:
		break;
 334:	55 c0       	rjmp	.+170    	; 0x3e0 <PORTB_set_pin_dir+0xd0>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 336:	84 e2       	ldi	r24, 0x24	; 36
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	24 e2       	ldi	r18, 0x24	; 36
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	f9 01       	movw	r30, r18
 340:	20 81       	ld	r18, Z
 342:	62 2f       	mov	r22, r18
 344:	29 81       	ldd	r18, Y+1	; 0x01
 346:	42 2f       	mov	r20, r18
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	21 e0       	ldi	r18, 0x01	; 1
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <PORTB_set_pin_dir+0x44>
 350:	22 0f       	add	r18, r18
 352:	33 1f       	adc	r19, r19
 354:	4a 95       	dec	r20
 356:	e2 f7       	brpl	.-8      	; 0x350 <PORTB_set_pin_dir+0x40>
 358:	20 95       	com	r18
 35a:	26 23       	and	r18, r22
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
		break;
 360:	3f c0       	rjmp	.+126    	; 0x3e0 <PORTB_set_pin_dir+0xd0>
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 362:	84 e2       	ldi	r24, 0x24	; 36
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	24 e2       	ldi	r18, 0x24	; 36
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	f9 01       	movw	r30, r18
 36c:	20 81       	ld	r18, Z
 36e:	62 2f       	mov	r22, r18
 370:	29 81       	ldd	r18, Y+1	; 0x01
 372:	42 2f       	mov	r20, r18
 374:	50 e0       	ldi	r21, 0x00	; 0
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <PORTB_set_pin_dir+0x70>
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	4a 95       	dec	r20
 382:	e2 f7       	brpl	.-8      	; 0x37c <PORTB_set_pin_dir+0x6c>
 384:	26 2b       	or	r18, r22
 386:	fc 01       	movw	r30, r24
 388:	20 83       	st	Z, r18
		break;
 38a:	2a c0       	rjmp	.+84     	; 0x3e0 <PORTB_set_pin_dir+0xd0>
	case PORT_DIR_OFF:
		DDRB &= ~(1 << pin);
 38c:	84 e2       	ldi	r24, 0x24	; 36
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	24 e2       	ldi	r18, 0x24	; 36
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	f9 01       	movw	r30, r18
 396:	20 81       	ld	r18, Z
 398:	62 2f       	mov	r22, r18
 39a:	29 81       	ldd	r18, Y+1	; 0x01
 39c:	42 2f       	mov	r20, r18
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <PORTB_set_pin_dir+0x9a>
 3a6:	22 0f       	add	r18, r18
 3a8:	33 1f       	adc	r19, r19
 3aa:	4a 95       	dec	r20
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <PORTB_set_pin_dir+0x96>
 3ae:	20 95       	com	r18
 3b0:	26 23       	and	r18, r22
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18

		PORTB |= 1 << pin;
 3b6:	85 e2       	ldi	r24, 0x25	; 37
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	25 e2       	ldi	r18, 0x25	; 37
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	f9 01       	movw	r30, r18
 3c0:	20 81       	ld	r18, Z
 3c2:	62 2f       	mov	r22, r18
 3c4:	29 81       	ldd	r18, Y+1	; 0x01
 3c6:	42 2f       	mov	r20, r18
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <PORTB_set_pin_dir+0xc4>
 3d0:	22 0f       	add	r18, r18
 3d2:	33 1f       	adc	r19, r19
 3d4:	4a 95       	dec	r20
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <PORTB_set_pin_dir+0xc0>
 3d8:	26 2b       	or	r18, r22
 3da:	fc 01       	movw	r30, r24
 3dc:	20 83       	st	Z, r18
		break;
 3de:	00 00       	nop
	default:
		break;
	}
}
 3e0:	00 00       	nop
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <PORTC_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	00 d0       	rcall	.+0      	; 0x3f2 <PORTC_set_port_dir+0x6>
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	89 83       	std	Y+1, r24	; 0x01
 3f8:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	88 2f       	mov	r24, r24
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	91 05       	cpc	r25, r1
 404:	99 f0       	breq	.+38     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	91 05       	cpc	r25, r1
 40a:	d9 f0       	breq	.+54     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 40c:	89 2b       	or	r24, r25
 40e:	09 f0       	breq	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		DDRC &= ~mask;

		PORTC |= mask;
		break;
	default:
		break;
 410:	2f c0       	rjmp	.+94     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~mask;
 412:	87 e2       	ldi	r24, 0x27	; 39
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	27 e2       	ldi	r18, 0x27	; 39
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	f9 01       	movw	r30, r18
 41c:	20 81       	ld	r18, Z
 41e:	32 2f       	mov	r19, r18
 420:	29 81       	ldd	r18, Y+1	; 0x01
 422:	20 95       	com	r18
 424:	23 23       	and	r18, r19
 426:	fc 01       	movw	r30, r24
 428:	20 83       	st	Z, r18
		break;
 42a:	22 c0       	rjmp	.+68     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	case PORT_DIR_OUT:
		DDRC |= mask;
 42c:	87 e2       	ldi	r24, 0x27	; 39
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	27 e2       	ldi	r18, 0x27	; 39
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	f9 01       	movw	r30, r18
 436:	30 81       	ld	r19, Z
 438:	29 81       	ldd	r18, Y+1	; 0x01
 43a:	23 2b       	or	r18, r19
 43c:	fc 01       	movw	r30, r24
 43e:	20 83       	st	Z, r18
		break;
 440:	17 c0       	rjmp	.+46     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 442:	87 e2       	ldi	r24, 0x27	; 39
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	27 e2       	ldi	r18, 0x27	; 39
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	f9 01       	movw	r30, r18
 44c:	20 81       	ld	r18, Z
 44e:	32 2f       	mov	r19, r18
 450:	29 81       	ldd	r18, Y+1	; 0x01
 452:	20 95       	com	r18
 454:	23 23       	and	r18, r19
 456:	fc 01       	movw	r30, r24
 458:	20 83       	st	Z, r18

		PORTC |= mask;
 45a:	88 e2       	ldi	r24, 0x28	; 40
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	28 e2       	ldi	r18, 0x28	; 40
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	f9 01       	movw	r30, r18
 464:	30 81       	ld	r19, Z
 466:	29 81       	ldd	r18, Y+1	; 0x01
 468:	23 2b       	or	r18, r19
 46a:	fc 01       	movw	r30, r24
 46c:	20 83       	st	Z, r18
		break;
 46e:	00 00       	nop
	default:
		break;
	}
}
 470:	00 00       	nop
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <PORTD_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	00 d0       	rcall	.+0      	; 0x482 <PORTD_set_port_dir+0x6>
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	89 83       	std	Y+1, r24	; 0x01
 488:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 48a:	8a 81       	ldd	r24, Y+2	; 0x02
 48c:	88 2f       	mov	r24, r24
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	91 05       	cpc	r25, r1
 494:	99 f0       	breq	.+38     	; 0x4bc <PORTD_set_port_dir+0x40>
 496:	82 30       	cpi	r24, 0x02	; 2
 498:	91 05       	cpc	r25, r1
 49a:	d9 f0       	breq	.+54     	; 0x4d2 <PORTD_set_port_dir+0x56>
 49c:	89 2b       	or	r24, r25
 49e:	09 f0       	breq	.+2      	; 0x4a2 <PORTD_set_port_dir+0x26>
		DDRD &= ~mask;

		PORTD |= mask;
		break;
	default:
		break;
 4a0:	2f c0       	rjmp	.+94     	; 0x500 <PORTD_set_port_dir+0x84>
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~mask;
 4a2:	8a e2       	ldi	r24, 0x2A	; 42
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	2a e2       	ldi	r18, 0x2A	; 42
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	f9 01       	movw	r30, r18
 4ac:	20 81       	ld	r18, Z
 4ae:	32 2f       	mov	r19, r18
 4b0:	29 81       	ldd	r18, Y+1	; 0x01
 4b2:	20 95       	com	r18
 4b4:	23 23       	and	r18, r19
 4b6:	fc 01       	movw	r30, r24
 4b8:	20 83       	st	Z, r18
		break;
 4ba:	22 c0       	rjmp	.+68     	; 0x500 <PORTD_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRD |= mask;
 4bc:	8a e2       	ldi	r24, 0x2A	; 42
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	2a e2       	ldi	r18, 0x2A	; 42
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	f9 01       	movw	r30, r18
 4c6:	30 81       	ld	r19, Z
 4c8:	29 81       	ldd	r18, Y+1	; 0x01
 4ca:	23 2b       	or	r18, r19
 4cc:	fc 01       	movw	r30, r24
 4ce:	20 83       	st	Z, r18
		break;
 4d0:	17 c0       	rjmp	.+46     	; 0x500 <PORTD_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 4d2:	8a e2       	ldi	r24, 0x2A	; 42
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	2a e2       	ldi	r18, 0x2A	; 42
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	f9 01       	movw	r30, r18
 4dc:	20 81       	ld	r18, Z
 4de:	32 2f       	mov	r19, r18
 4e0:	29 81       	ldd	r18, Y+1	; 0x01
 4e2:	20 95       	com	r18
 4e4:	23 23       	and	r18, r19
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 83       	st	Z, r18

		PORTD |= mask;
 4ea:	8b e2       	ldi	r24, 0x2B	; 43
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	2b e2       	ldi	r18, 0x2B	; 43
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	f9 01       	movw	r30, r18
 4f4:	30 81       	ld	r19, Z
 4f6:	29 81       	ldd	r18, Y+1	; 0x01
 4f8:	23 2b       	or	r18, r19
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 83       	st	Z, r18
		break;
 4fe:	00 00       	nop
	default:
		break;
	}
}
 500:	00 00       	nop
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	00 d0       	rcall	.+0      	; 0x512 <PORTD_set_pin_dir+0x6>
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	89 83       	std	Y+1, r24	; 0x01
 518:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 51a:	8a 81       	ldd	r24, Y+2	; 0x02
 51c:	88 2f       	mov	r24, r24
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	91 05       	cpc	r25, r1
 524:	e1 f0       	breq	.+56     	; 0x55e <PORTD_set_pin_dir+0x52>
 526:	82 30       	cpi	r24, 0x02	; 2
 528:	91 05       	cpc	r25, r1
 52a:	71 f1       	breq	.+92     	; 0x588 <PORTD_set_pin_dir+0x7c>
 52c:	89 2b       	or	r24, r25
 52e:	09 f0       	breq	.+2      	; 0x532 <PORTD_set_pin_dir+0x26>
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
		break;
	default:
		break;
 530:	55 c0       	rjmp	.+170    	; 0x5dc <PORTD_set_pin_dir+0xd0>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 532:	8a e2       	ldi	r24, 0x2A	; 42
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	2a e2       	ldi	r18, 0x2A	; 42
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	f9 01       	movw	r30, r18
 53c:	20 81       	ld	r18, Z
 53e:	62 2f       	mov	r22, r18
 540:	29 81       	ldd	r18, Y+1	; 0x01
 542:	42 2f       	mov	r20, r18
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	21 e0       	ldi	r18, 0x01	; 1
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <PORTD_set_pin_dir+0x44>
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	4a 95       	dec	r20
 552:	e2 f7       	brpl	.-8      	; 0x54c <PORTD_set_pin_dir+0x40>
 554:	20 95       	com	r18
 556:	26 23       	and	r18, r22
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
		break;
 55c:	3f c0       	rjmp	.+126    	; 0x5dc <PORTD_set_pin_dir+0xd0>
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 55e:	8a e2       	ldi	r24, 0x2A	; 42
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	2a e2       	ldi	r18, 0x2A	; 42
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	f9 01       	movw	r30, r18
 568:	20 81       	ld	r18, Z
 56a:	62 2f       	mov	r22, r18
 56c:	29 81       	ldd	r18, Y+1	; 0x01
 56e:	42 2f       	mov	r20, r18
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	21 e0       	ldi	r18, 0x01	; 1
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <PORTD_set_pin_dir+0x70>
 578:	22 0f       	add	r18, r18
 57a:	33 1f       	adc	r19, r19
 57c:	4a 95       	dec	r20
 57e:	e2 f7       	brpl	.-8      	; 0x578 <PORTD_set_pin_dir+0x6c>
 580:	26 2b       	or	r18, r22
 582:	fc 01       	movw	r30, r24
 584:	20 83       	st	Z, r18
		break;
 586:	2a c0       	rjmp	.+84     	; 0x5dc <PORTD_set_pin_dir+0xd0>
	case PORT_DIR_OFF:
		DDRD &= ~(1 << pin);
 588:	8a e2       	ldi	r24, 0x2A	; 42
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	2a e2       	ldi	r18, 0x2A	; 42
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	f9 01       	movw	r30, r18
 592:	20 81       	ld	r18, Z
 594:	62 2f       	mov	r22, r18
 596:	29 81       	ldd	r18, Y+1	; 0x01
 598:	42 2f       	mov	r20, r18
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	21 e0       	ldi	r18, 0x01	; 1
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <PORTD_set_pin_dir+0x9a>
 5a2:	22 0f       	add	r18, r18
 5a4:	33 1f       	adc	r19, r19
 5a6:	4a 95       	dec	r20
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <PORTD_set_pin_dir+0x96>
 5aa:	20 95       	com	r18
 5ac:	26 23       	and	r18, r22
 5ae:	fc 01       	movw	r30, r24
 5b0:	20 83       	st	Z, r18

		PORTD |= 1 << pin;
 5b2:	8b e2       	ldi	r24, 0x2B	; 43
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	2b e2       	ldi	r18, 0x2B	; 43
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	f9 01       	movw	r30, r18
 5bc:	20 81       	ld	r18, Z
 5be:	62 2f       	mov	r22, r18
 5c0:	29 81       	ldd	r18, Y+1	; 0x01
 5c2:	42 2f       	mov	r20, r18
 5c4:	50 e0       	ldi	r21, 0x00	; 0
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <PORTD_set_pin_dir+0xc4>
 5cc:	22 0f       	add	r18, r18
 5ce:	33 1f       	adc	r19, r19
 5d0:	4a 95       	dec	r20
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <PORTD_set_pin_dir+0xc0>
 5d4:	26 2b       	or	r18, r22
 5d6:	fc 01       	movw	r30, r24
 5d8:	20 83       	st	Z, r18
		break;
 5da:	00 00       	nop
	default:
		break;
	}
}
 5dc:	00 00       	nop
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	00 d0       	rcall	.+0      	; 0x5ee <PORTD_set_pin_level+0x6>
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62
 5f2:	89 83       	std	Y+1, r24	; 0x01
 5f4:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
 5f6:	8a 81       	ldd	r24, Y+2	; 0x02
 5f8:	88 23       	and	r24, r24
 5fa:	a9 f0       	breq	.+42     	; 0x626 <PORTD_set_pin_level+0x3e>
		PORTD |= 1 << pin;
 5fc:	8b e2       	ldi	r24, 0x2B	; 43
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	2b e2       	ldi	r18, 0x2B	; 43
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	f9 01       	movw	r30, r18
 606:	20 81       	ld	r18, Z
 608:	62 2f       	mov	r22, r18
 60a:	29 81       	ldd	r18, Y+1	; 0x01
 60c:	42 2f       	mov	r20, r18
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	21 e0       	ldi	r18, 0x01	; 1
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <PORTD_set_pin_level+0x32>
 616:	22 0f       	add	r18, r18
 618:	33 1f       	adc	r19, r19
 61a:	4a 95       	dec	r20
 61c:	e2 f7       	brpl	.-8      	; 0x616 <PORTD_set_pin_level+0x2e>
 61e:	26 2b       	or	r18, r22
 620:	fc 01       	movw	r30, r24
 622:	20 83       	st	Z, r18
	} else {
		PORTD &= ~(1 << pin);
	}
}
 624:	15 c0       	rjmp	.+42     	; 0x650 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 626:	8b e2       	ldi	r24, 0x2B	; 43
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	2b e2       	ldi	r18, 0x2B	; 43
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	f9 01       	movw	r30, r18
 630:	20 81       	ld	r18, Z
 632:	62 2f       	mov	r22, r18
 634:	29 81       	ldd	r18, Y+1	; 0x01
 636:	42 2f       	mov	r20, r18
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	21 e0       	ldi	r18, 0x01	; 1
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <PORTD_set_pin_level+0x5c>
 640:	22 0f       	add	r18, r18
 642:	33 1f       	adc	r19, r19
 644:	4a 95       	dec	r20
 646:	e2 f7       	brpl	.-8      	; 0x640 <PORTD_set_pin_level+0x58>
 648:	20 95       	com	r18
 64a:	26 23       	and	r18, r22
 64c:	fc 01       	movw	r30, r24
 64e:	20 83       	st	Z, r18
	}
}
 650:	00 00       	nop
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	08 95       	ret

0000065c <PORTE_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTE_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	00 d0       	rcall	.+0      	; 0x662 <PORTE_set_port_dir+0x6>
 662:	cd b7       	in	r28, 0x3d	; 61
 664:	de b7       	in	r29, 0x3e	; 62
 666:	89 83       	std	Y+1, r24	; 0x01
 668:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 66a:	8a 81       	ldd	r24, Y+2	; 0x02
 66c:	88 2f       	mov	r24, r24
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	81 30       	cpi	r24, 0x01	; 1
 672:	91 05       	cpc	r25, r1
 674:	99 f0       	breq	.+38     	; 0x69c <PORTE_set_port_dir+0x40>
 676:	82 30       	cpi	r24, 0x02	; 2
 678:	91 05       	cpc	r25, r1
 67a:	d9 f0       	breq	.+54     	; 0x6b2 <PORTE_set_port_dir+0x56>
 67c:	89 2b       	or	r24, r25
 67e:	09 f0       	breq	.+2      	; 0x682 <PORTE_set_port_dir+0x26>
		DDRE &= ~mask;

		PORTE |= mask;
		break;
	default:
		break;
 680:	2f c0       	rjmp	.+94     	; 0x6e0 <PORTE_set_port_dir+0x84>
 */
static inline void PORTE_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~mask;
 682:	8d e2       	ldi	r24, 0x2D	; 45
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	2d e2       	ldi	r18, 0x2D	; 45
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	f9 01       	movw	r30, r18
 68c:	20 81       	ld	r18, Z
 68e:	32 2f       	mov	r19, r18
 690:	29 81       	ldd	r18, Y+1	; 0x01
 692:	20 95       	com	r18
 694:	23 23       	and	r18, r19
 696:	fc 01       	movw	r30, r24
 698:	20 83       	st	Z, r18
		break;
 69a:	22 c0       	rjmp	.+68     	; 0x6e0 <PORTE_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRE |= mask;
 69c:	8d e2       	ldi	r24, 0x2D	; 45
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	2d e2       	ldi	r18, 0x2D	; 45
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	f9 01       	movw	r30, r18
 6a6:	30 81       	ld	r19, Z
 6a8:	29 81       	ldd	r18, Y+1	; 0x01
 6aa:	23 2b       	or	r18, r19
 6ac:	fc 01       	movw	r30, r24
 6ae:	20 83       	st	Z, r18
		break;
 6b0:	17 c0       	rjmp	.+46     	; 0x6e0 <PORTE_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 6b2:	8d e2       	ldi	r24, 0x2D	; 45
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	2d e2       	ldi	r18, 0x2D	; 45
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	f9 01       	movw	r30, r18
 6bc:	20 81       	ld	r18, Z
 6be:	32 2f       	mov	r19, r18
 6c0:	29 81       	ldd	r18, Y+1	; 0x01
 6c2:	20 95       	com	r18
 6c4:	23 23       	and	r18, r19
 6c6:	fc 01       	movw	r30, r24
 6c8:	20 83       	st	Z, r18

		PORTE |= mask;
 6ca:	8e e2       	ldi	r24, 0x2E	; 46
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	2e e2       	ldi	r18, 0x2E	; 46
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	f9 01       	movw	r30, r18
 6d4:	30 81       	ld	r19, Z
 6d6:	29 81       	ldd	r18, Y+1	; 0x01
 6d8:	23 2b       	or	r18, r19
 6da:	fc 01       	movw	r30, r24
 6dc:	20 83       	st	Z, r18
		break;
 6de:	00 00       	nop
	default:
		break;
	}
}
 6e0:	00 00       	nop
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <Button_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void Button_set_pull_mode(const enum port_pull_mode pull_mode)
{
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	1f 92       	push	r1
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
 6f6:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_pull_mode(7, pull_mode);
 6f8:	69 81       	ldd	r22, Y+1	; 0x01
 6fa:	87 e0       	ldi	r24, 0x07	; 7
 6fc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <PORTB_set_pin_pull_mode>
}
 700:	00 00       	nop
 702:	0f 90       	pop	r0
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	08 95       	ret

0000070a <Button_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void Button_set_dir(const enum port_dir dir)
{
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	1f 92       	push	r1
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(7, dir);
 716:	69 81       	ldd	r22, Y+1	; 0x01
 718:	87 e0       	ldi	r24, 0x07	; 7
 71a:	0e 94 88 01 	call	0x310	; 0x310 <PORTB_set_pin_dir>
}
 71e:	00 00       	nop
 720:	0f 90       	pop	r0
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <MyGpio_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void MyGpio_set_dir(const enum port_dir dir)
{
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	1f 92       	push	r1
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
 732:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(7, dir);
 734:	69 81       	ldd	r22, Y+1	; 0x01
 736:	87 e0       	ldi	r24, 0x07	; 7
 738:	0e 94 86 02 	call	0x50c	; 0x50c <PORTD_set_pin_dir>
}
 73c:	00 00       	nop
 73e:	0f 90       	pop	r0
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	08 95       	ret

00000746 <MyGpio_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void MyGpio_set_level(const bool level)
{
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	1f 92       	push	r1
 74c:	cd b7       	in	r28, 0x3d	; 61
 74e:	de b7       	in	r29, 0x3e	; 62
 750:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(7, level);
 752:	69 81       	ldd	r22, Y+1	; 0x01
 754:	87 e0       	ldi	r24, 0x07	; 7
 756:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <PORTD_set_pin_level>
}
 75a:	00 00       	nop
 75c:	0f 90       	pop	r0
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	08 95       	ret

00000764 <sysctrl_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 76c:	40 e0       	ldi	r20, 0x00	; 0
 76e:	60 e8       	ldi	r22, 0x80	; 128
 770:	81 e6       	ldi	r24, 0x61	; 97
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 02 04 	call	0x804	; 0x804 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 778:	83 e5       	ldi	r24, 0x53	; 83
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	fc 01       	movw	r30, r24
 77e:	10 82       	st	Z, r1
	       (0 << SE);

	MCUCR = (0 << PUD);
 780:	85 e5       	ldi	r24, 0x55	; 85
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	fc 01       	movw	r30, r24
 786:	10 82       	st	Z, r1

	return 0;
 788:	80 e0       	ldi	r24, 0x00	; 0
}
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	08 95       	ret

00000790 <mcu_init>:
#define MCU_RESET_CAUSE_EXT (1 << EXTRF)
#define MCU_RESET_CAUSE_BOR (1 << BORF)
#define MCU_RESET_CAUSE_WDT (1 << WDRF)

static inline void mcu_init(void)
{
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 798:	85 e6       	ldi	r24, 0x65	; 101
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	2d e3       	ldi	r18, 0x3D	; 61
 79e:	fc 01       	movw	r30, r24
 7a0:	20 83       	st	Z, r18

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 7a2:	84 e6       	ldi	r24, 0x64	; 100
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	2f ef       	ldi	r18, 0xFF	; 255
 7a8:	fc 01       	movw	r30, r24
 7aa:	20 83       	st	Z, r18
	       | (1 << PRADC) | (1 << PRSPI0);

	/* Set all pins to low power mode */
	PORTB_set_port_dir(0xff, PORT_DIR_OFF);
 7ac:	62 e0       	ldi	r22, 0x02	; 2
 7ae:	8f ef       	ldi	r24, 0xFF	; 255
 7b0:	0e 94 40 01 	call	0x280	; 0x280 <PORTB_set_port_dir>
	PORTC_set_port_dir(0x7f, PORT_DIR_OFF);
 7b4:	62 e0       	ldi	r22, 0x02	; 2
 7b6:	8f e7       	ldi	r24, 0x7F	; 127
 7b8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <PORTC_set_port_dir>
	PORTD_set_port_dir(0xff, PORT_DIR_OFF);
 7bc:	62 e0       	ldi	r22, 0x02	; 2
 7be:	8f ef       	ldi	r24, 0xFF	; 255
 7c0:	0e 94 3e 02 	call	0x47c	; 0x47c <PORTD_set_port_dir>
	PORTE_set_port_dir(0x0f, PORT_DIR_OFF);
 7c4:	62 e0       	ldi	r22, 0x02	; 2
 7c6:	8f e0       	ldi	r24, 0x0F	; 15
 7c8:	0e 94 2e 03 	call	0x65c	; 0x65c <PORTE_set_port_dir>
}
 7cc:	00 00       	nop
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	08 95       	ret

000007d4 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
 7d8:	cd b7       	in	r28, 0x3d	; 61
 7da:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 7dc:	0e 94 c8 03 	call	0x790	; 0x790 <mcu_init>

	/* PORT setting on PB7 */

	// Set pin direction to input
	Button_set_dir(PORT_DIR_IN);
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	0e 94 85 03 	call	0x70a	; 0x70a <Button_set_dir>

	Button_set_pull_mode(
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	0e 94 76 03 	call	0x6ec	; 0x6ec <Button_set_pull_mode>
	    PORT_PULL_OFF);

	/* PORT setting on PD7 */

	// Set pin direction to output
	MyGpio_set_dir(PORT_DIR_OUT);
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	0e 94 94 03 	call	0x728	; 0x728 <MyGpio_set_dir>

	MyGpio_set_level(
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	0e 94 a3 03 	call	0x746	; 0x746 <MyGpio_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	sysctrl_init();
 7f8:	0e 94 b2 03 	call	0x764	; 0x764 <sysctrl_init>
}
 7fc:	00 00       	nop
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	08 95       	ret

00000804 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 804:	2f b7       	in	r18, 0x3f	; 63
	cli
 806:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 808:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 80a:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 80c:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 80e:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 810:	08 95       	ret

00000812 <_exit>:
 812:	f8 94       	cli

00000814 <__stop_program>:
 814:	ff cf       	rjmp	.-2      	; 0x814 <__stop_program>
