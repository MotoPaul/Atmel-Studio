
SamplePrj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000912  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000998  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000009d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f77  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b3f  00000000  00000000  00001a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d0  00000000  00000000  000025d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000033c  00000000  00000000  00002fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000640  00000000  00000000  000032e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000665  00000000  00000000  00003924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 08 01 	call	0x210	; 0x210 <main>
  c4:	0c 94 87 04 	jmp	0x90e	; 0x90e <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	system_init();
  d4:	0e 94 68 04 	call	0x8d0	; 0x8d0 <system_init>
}
  d8:	00 00       	nop
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <PORTB_get_pin_level>:
 * Reads the level on a pin connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	1f 92       	push	r1
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	89 83       	std	Y+1, r24	; 0x01
	return PINB & (1 << pin);
  ec:	83 e2       	ldi	r24, 0x23	; 35
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	80 81       	ld	r24, Z
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	48 2f       	mov	r20, r24
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <PORTB_get_pin_level+0x28>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	4a 95       	dec	r20
 10a:	e2 f7       	brpl	.-8      	; 0x104 <PORTB_get_pin_level+0x24>
 10c:	82 23       	and	r24, r18
 10e:	93 23       	and	r25, r19
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	89 2b       	or	r24, r25
 114:	09 f4       	brne	.+2      	; 0x118 <PORTB_get_pin_level+0x38>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	82 2f       	mov	r24, r18
}
 11a:	0f 90       	pop	r0
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	00 d0       	rcall	.+0      	; 0x128 <PORTD_set_pin_level+0x6>
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	89 83       	std	Y+1, r24	; 0x01
 12e:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	88 23       	and	r24, r24
 134:	a9 f0       	breq	.+42     	; 0x160 <PORTD_set_pin_level+0x3e>
		PORTD |= 1 << pin;
 136:	8b e2       	ldi	r24, 0x2B	; 43
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2b e2       	ldi	r18, 0x2B	; 43
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	20 81       	ld	r18, Z
 142:	62 2f       	mov	r22, r18
 144:	29 81       	ldd	r18, Y+1	; 0x01
 146:	42 2f       	mov	r20, r18
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <PORTD_set_pin_level+0x32>
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	4a 95       	dec	r20
 156:	e2 f7       	brpl	.-8      	; 0x150 <PORTD_set_pin_level+0x2e>
 158:	26 2b       	or	r18, r22
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
	} else {
		PORTD &= ~(1 << pin);
	}
}
 15e:	15 c0       	rjmp	.+42     	; 0x18a <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 160:	8b e2       	ldi	r24, 0x2B	; 43
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	2b e2       	ldi	r18, 0x2B	; 43
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	f9 01       	movw	r30, r18
 16a:	20 81       	ld	r18, Z
 16c:	62 2f       	mov	r22, r18
 16e:	29 81       	ldd	r18, Y+1	; 0x01
 170:	42 2f       	mov	r20, r18
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <PORTD_set_pin_level+0x5c>
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	4a 95       	dec	r20
 180:	e2 f7       	brpl	.-8      	; 0x17a <PORTD_set_pin_level+0x58>
 182:	20 95       	com	r18
 184:	26 23       	and	r18, r22
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
	}
}
 18a:	00 00       	nop
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <PORTD_toggle_pin_level>:
 * Toggle the pin levels on pin
 *
 * \param[in] pin       The pin number for device
 */
static inline void PORTD_toggle_pin_level(const uint8_t pin)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	1f 92       	push	r1
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	89 83       	std	Y+1, r24	; 0x01
	PIND = 1 << pin;
 1a2:	89 e2       	ldi	r24, 0x29	; 41
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	29 81       	ldd	r18, Y+1	; 0x01
 1a8:	42 2f       	mov	r20, r18
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <PORTD_toggle_pin_level+0x20>
 1b2:	22 0f       	add	r18, r18
 1b4:	33 1f       	adc	r19, r19
 1b6:	4a 95       	dec	r20
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <PORTD_toggle_pin_level+0x1c>
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
}
 1be:	00 00       	nop
 1c0:	0f 90       	pop	r0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <Button_get_level>:
 * \brief Get level on Button
 *
 * Reads the level on a pin
 */
static inline bool Button_get_level()
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
	return PORTB_get_pin_level(7);
 1d0:	87 e0       	ldi	r24, 0x07	; 7
 1d2:	0e 94 70 00 	call	0xe0	; 0xe0 <PORTB_get_pin_level>
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <MyGpio_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void MyGpio_set_level(const bool level)
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	1f 92       	push	r1
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(7, level);
 1e8:	69 81       	ldd	r22, Y+1	; 0x01
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	0e 94 91 00 	call	0x122	; 0x122 <PORTD_set_pin_level>
}
 1f0:	00 00       	nop
 1f2:	0f 90       	pop	r0
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <MyGpio_toggle_level>:
 * \brief Toggle output level on MyGpio
 *
 * Toggle the pin level
 */
static inline void MyGpio_toggle_level()
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(7);
 202:	87 e0       	ldi	r24, 0x07	; 7
 204:	0e 94 cb 00 	call	0x196	; 0x196 <PORTD_toggle_pin_level>
}
 208:	00 00       	nop
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <main>:
*
* @note
*
****************************************************************************/
int main(void)
{   
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
	
	/* Initializes MCU, drivers and middleware */
	C_Delay();
 218:	0e 94 26 01 	call	0x24c	; 0x24c <C_Delay>
	atmel_start_init();
 21c:	0e 94 66 00 	call	0xcc	; 0xcc <atmel_start_init>
    C_Delay();
 220:	0e 94 26 01 	call	0x24c	; 0x24c <C_Delay>
	  C_Delay();
	  */
	  
	  
	  //Toggle Gpio via ASM code One_mS_Delay()	
	  MyGpio_set_level(true);
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 ee 00 	call	0x1dc	; 0x1dc <MyGpio_set_level>
	  Delay250mS();
 22a:	0e 94 41 01 	call	0x282	; 0x282 <Delay250mS>
	  MyGpio_set_level(false);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 ee 00 	call	0x1dc	; 0x1dc <MyGpio_set_level>
	  Delay250mS();
 234:	0e 94 41 01 	call	0x282	; 0x282 <Delay250mS>
	    
	
	  
	  //Toggle Gpio via user button trigger
	  if( Button_get_level()==false )
 238:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Button_get_level>
 23c:	98 2f       	mov	r25, r24
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	89 27       	eor	r24, r25
 242:	88 23       	and	r24, r24
 244:	79 f3       	breq	.-34     	; 0x224 <main+0x14>
	     MyGpio_toggle_level();
 246:	0e 94 fd 00 	call	0x1fa	; 0x1fa <MyGpio_toggle_level>
	    
	}
 24a:	ec cf       	rjmp	.-40     	; 0x224 <main+0x14>

0000024c <C_Delay>:
*
* @note
*
****************************************************************************/
void C_Delay(void)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	00 d0       	rcall	.+0      	; 0x252 <C_Delay+0x6>
 252:	00 d0       	rcall	.+0      	; 0x254 <C_Delay+0x8>
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
   volatile int i;
   
   for(int i=0;i<__DELAY_COUNT;++i)
 258:	1a 82       	std	Y+2, r1	; 0x02
 25a:	19 82       	std	Y+1, r1	; 0x01
 25c:	05 c0       	rjmp	.+10     	; 0x268 <C_Delay+0x1c>
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	9a 81       	ldd	r25, Y+2	; 0x02
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	9a 83       	std	Y+2, r25	; 0x02
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	9a 81       	ldd	r25, Y+2	; 0x02
 26c:	80 32       	cpi	r24, 0x20	; 32
 26e:	9e 44       	sbci	r25, 0x4E	; 78
 270:	b4 f3       	brlt	.-20     	; 0x25e <C_Delay+0x12>
      ;
 272:	00 00       	nop
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <Delay250mS>:


	PUBLIC_FUNCTION(Delay250mS)

Delay250mS: 
	        push r27
 282:	bf 93       	push	r27
			push r26
 284:	af 93       	push	r26
			ldi  r26,0
 286:	a0 e0       	ldi	r26, 0x00	; 0

00000288 <loopLabel2>:
loopLabel2:	ldi  r27,0
 288:	b0 e0       	ldi	r27, 0x00	; 0

0000028a <loopLabel1>:
	...
			nop                      ;
			nop                      ;
			nop                      ;
			nop                      ;
			nop                      ;
			inc  r27                 ; Increase r27 by 1
 2c6:	b3 95       	inc	r27
       	    cpi  r27,250             ; Compare r27 to 250
 2c8:	ba 3f       	cpi	r27, 0xFA	; 250
      	    brne loopLabel1          ; Branch if r27 not equal to 250, jump to Label "LoopLabel1", else if equal to 250 loop is done
 2ca:	f9 f6       	brne	.-66     	; 0x28a <loopLabel1>
			inc  r26                 ; Increase r26 by 1
 2cc:	a3 95       	inc	r26
			cpi  r26,250             ;
 2ce:	aa 3f       	cpi	r26, 0xFA	; 250
			brne loopLabel2          ; Branch if r26 not equal to 250, jump to Label "LoopLabel2", else if equal to 250 loop is done
 2d0:	d9 f6       	brne	.-74     	; 0x288 <loopLabel2>

			pop r26                  ;
 2d2:	af 91       	pop	r26
			pop r27                  ;
 2d4:	bf 91       	pop	r27
      	    ret                      ; return
 2d6:	08 95       	ret

000002d8 <PORTB_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number in PORTB
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	00 d0       	rcall	.+0      	; 0x2de <PORTB_set_pin_pull_mode+0x6>
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	89 83       	std	Y+1, r24	; 0x01
 2e4:	6a 83       	std	Y+2, r22	; 0x02

	if (pull_mode == PORT_PULL_UP) {
 2e6:	8a 81       	ldd	r24, Y+2	; 0x02
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	51 f5       	brne	.+84     	; 0x340 <PORTB_set_pin_pull_mode+0x68>

		DDRB &= ~(1 << pin);
 2ec:	84 e2       	ldi	r24, 0x24	; 36
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	24 e2       	ldi	r18, 0x24	; 36
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	f9 01       	movw	r30, r18
 2f6:	20 81       	ld	r18, Z
 2f8:	62 2f       	mov	r22, r18
 2fa:	29 81       	ldd	r18, Y+1	; 0x01
 2fc:	42 2f       	mov	r20, r18
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <PORTB_set_pin_pull_mode+0x32>
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	4a 95       	dec	r20
 30c:	e2 f7       	brpl	.-8      	; 0x306 <PORTB_set_pin_pull_mode+0x2e>
 30e:	20 95       	com	r18
 310:	26 23       	and	r18, r22
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18

		PORTB |= 1 << pin;
 316:	85 e2       	ldi	r24, 0x25	; 37
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	25 e2       	ldi	r18, 0x25	; 37
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	f9 01       	movw	r30, r18
 320:	20 81       	ld	r18, Z
 322:	62 2f       	mov	r22, r18
 324:	29 81       	ldd	r18, Y+1	; 0x01
 326:	42 2f       	mov	r20, r18
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <PORTB_set_pin_pull_mode+0x5c>
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	4a 95       	dec	r20
 336:	e2 f7       	brpl	.-8      	; 0x330 <PORTB_set_pin_pull_mode+0x58>
 338:	26 2b       	or	r18, r22
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
	}
}
 33e:	18 c0       	rjmp	.+48     	; 0x370 <PORTB_set_pin_pull_mode+0x98>
	if (pull_mode == PORT_PULL_UP) {

		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	88 23       	and	r24, r24
 344:	a9 f4       	brne	.+42     	; 0x370 <PORTB_set_pin_pull_mode+0x98>

		PORTB &= ~(1 << pin);
 346:	85 e2       	ldi	r24, 0x25	; 37
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	25 e2       	ldi	r18, 0x25	; 37
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	f9 01       	movw	r30, r18
 350:	20 81       	ld	r18, Z
 352:	62 2f       	mov	r22, r18
 354:	29 81       	ldd	r18, Y+1	; 0x01
 356:	42 2f       	mov	r20, r18
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <PORTB_set_pin_pull_mode+0x8c>
 360:	22 0f       	add	r18, r18
 362:	33 1f       	adc	r19, r19
 364:	4a 95       	dec	r20
 366:	e2 f7       	brpl	.-8      	; 0x360 <PORTB_set_pin_pull_mode+0x88>
 368:	20 95       	com	r18
 36a:	26 23       	and	r18, r22
 36c:	fc 01       	movw	r30, r24
 36e:	20 83       	st	Z, r18
	}
}
 370:	00 00       	nop
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <PORTB_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	00 d0       	rcall	.+0      	; 0x382 <PORTB_set_port_dir+0x6>
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	89 83       	std	Y+1, r24	; 0x01
 388:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	88 2f       	mov	r24, r24
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	91 05       	cpc	r25, r1
 394:	99 f0       	breq	.+38     	; 0x3bc <PORTB_set_port_dir+0x40>
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	91 05       	cpc	r25, r1
 39a:	d9 f0       	breq	.+54     	; 0x3d2 <PORTB_set_port_dir+0x56>
 39c:	89 2b       	or	r24, r25
 39e:	09 f0       	breq	.+2      	; 0x3a2 <PORTB_set_port_dir+0x26>
		DDRB &= ~mask;

		PORTB |= mask;
		break;
	default:
		break;
 3a0:	2f c0       	rjmp	.+94     	; 0x400 <__EEPROM_REGION_LENGTH__>
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~mask;
 3a2:	84 e2       	ldi	r24, 0x24	; 36
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	24 e2       	ldi	r18, 0x24	; 36
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	f9 01       	movw	r30, r18
 3ac:	20 81       	ld	r18, Z
 3ae:	32 2f       	mov	r19, r18
 3b0:	29 81       	ldd	r18, Y+1	; 0x01
 3b2:	20 95       	com	r18
 3b4:	23 23       	and	r18, r19
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
		break;
 3ba:	22 c0       	rjmp	.+68     	; 0x400 <__EEPROM_REGION_LENGTH__>
	case PORT_DIR_OUT:
		DDRB |= mask;
 3bc:	84 e2       	ldi	r24, 0x24	; 36
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	24 e2       	ldi	r18, 0x24	; 36
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	f9 01       	movw	r30, r18
 3c6:	30 81       	ld	r19, Z
 3c8:	29 81       	ldd	r18, Y+1	; 0x01
 3ca:	23 2b       	or	r18, r19
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
		break;
 3d0:	17 c0       	rjmp	.+46     	; 0x400 <__EEPROM_REGION_LENGTH__>
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 3d2:	84 e2       	ldi	r24, 0x24	; 36
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	24 e2       	ldi	r18, 0x24	; 36
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	f9 01       	movw	r30, r18
 3dc:	20 81       	ld	r18, Z
 3de:	32 2f       	mov	r19, r18
 3e0:	29 81       	ldd	r18, Y+1	; 0x01
 3e2:	20 95       	com	r18
 3e4:	23 23       	and	r18, r19
 3e6:	fc 01       	movw	r30, r24
 3e8:	20 83       	st	Z, r18

		PORTB |= mask;
 3ea:	85 e2       	ldi	r24, 0x25	; 37
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	25 e2       	ldi	r18, 0x25	; 37
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	f9 01       	movw	r30, r18
 3f4:	30 81       	ld	r19, Z
 3f6:	29 81       	ldd	r18, Y+1	; 0x01
 3f8:	23 2b       	or	r18, r19
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
		break;
 3fe:	00 00       	nop
	default:
		break;
	}
}
 400:	00 00       	nop
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <PORTB_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	00 d0       	rcall	.+0      	; 0x412 <PORTB_set_pin_dir+0x6>
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	89 83       	std	Y+1, r24	; 0x01
 418:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 41a:	8a 81       	ldd	r24, Y+2	; 0x02
 41c:	88 2f       	mov	r24, r24
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	91 05       	cpc	r25, r1
 424:	e1 f0       	breq	.+56     	; 0x45e <PORTB_set_pin_dir+0x52>
 426:	82 30       	cpi	r24, 0x02	; 2
 428:	91 05       	cpc	r25, r1
 42a:	71 f1       	breq	.+92     	; 0x488 <PORTB_set_pin_dir+0x7c>
 42c:	89 2b       	or	r24, r25
 42e:	09 f0       	breq	.+2      	; 0x432 <PORTB_set_pin_dir+0x26>
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
		break;
	default:
		break;
 430:	55 c0       	rjmp	.+170    	; 0x4dc <PORTB_set_pin_dir+0xd0>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 432:	84 e2       	ldi	r24, 0x24	; 36
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	24 e2       	ldi	r18, 0x24	; 36
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	f9 01       	movw	r30, r18
 43c:	20 81       	ld	r18, Z
 43e:	62 2f       	mov	r22, r18
 440:	29 81       	ldd	r18, Y+1	; 0x01
 442:	42 2f       	mov	r20, r18
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <PORTB_set_pin_dir+0x44>
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	4a 95       	dec	r20
 452:	e2 f7       	brpl	.-8      	; 0x44c <PORTB_set_pin_dir+0x40>
 454:	20 95       	com	r18
 456:	26 23       	and	r18, r22
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
		break;
 45c:	3f c0       	rjmp	.+126    	; 0x4dc <PORTB_set_pin_dir+0xd0>
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 45e:	84 e2       	ldi	r24, 0x24	; 36
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	24 e2       	ldi	r18, 0x24	; 36
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	f9 01       	movw	r30, r18
 468:	20 81       	ld	r18, Z
 46a:	62 2f       	mov	r22, r18
 46c:	29 81       	ldd	r18, Y+1	; 0x01
 46e:	42 2f       	mov	r20, r18
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <PORTB_set_pin_dir+0x70>
 478:	22 0f       	add	r18, r18
 47a:	33 1f       	adc	r19, r19
 47c:	4a 95       	dec	r20
 47e:	e2 f7       	brpl	.-8      	; 0x478 <PORTB_set_pin_dir+0x6c>
 480:	26 2b       	or	r18, r22
 482:	fc 01       	movw	r30, r24
 484:	20 83       	st	Z, r18
		break;
 486:	2a c0       	rjmp	.+84     	; 0x4dc <PORTB_set_pin_dir+0xd0>
	case PORT_DIR_OFF:
		DDRB &= ~(1 << pin);
 488:	84 e2       	ldi	r24, 0x24	; 36
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	24 e2       	ldi	r18, 0x24	; 36
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	f9 01       	movw	r30, r18
 492:	20 81       	ld	r18, Z
 494:	62 2f       	mov	r22, r18
 496:	29 81       	ldd	r18, Y+1	; 0x01
 498:	42 2f       	mov	r20, r18
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <PORTB_set_pin_dir+0x9a>
 4a2:	22 0f       	add	r18, r18
 4a4:	33 1f       	adc	r19, r19
 4a6:	4a 95       	dec	r20
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <PORTB_set_pin_dir+0x96>
 4aa:	20 95       	com	r18
 4ac:	26 23       	and	r18, r22
 4ae:	fc 01       	movw	r30, r24
 4b0:	20 83       	st	Z, r18

		PORTB |= 1 << pin;
 4b2:	85 e2       	ldi	r24, 0x25	; 37
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	25 e2       	ldi	r18, 0x25	; 37
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	f9 01       	movw	r30, r18
 4bc:	20 81       	ld	r18, Z
 4be:	62 2f       	mov	r22, r18
 4c0:	29 81       	ldd	r18, Y+1	; 0x01
 4c2:	42 2f       	mov	r20, r18
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <PORTB_set_pin_dir+0xc4>
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	4a 95       	dec	r20
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <PORTB_set_pin_dir+0xc0>
 4d4:	26 2b       	or	r18, r22
 4d6:	fc 01       	movw	r30, r24
 4d8:	20 83       	st	Z, r18
		break;
 4da:	00 00       	nop
	default:
		break;
	}
}
 4dc:	00 00       	nop
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <PORTC_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	00 d0       	rcall	.+0      	; 0x4ee <PORTC_set_port_dir+0x6>
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	89 83       	std	Y+1, r24	; 0x01
 4f4:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	88 2f       	mov	r24, r24
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	91 05       	cpc	r25, r1
 500:	99 f0       	breq	.+38     	; 0x528 <PORTC_set_port_dir+0x40>
 502:	82 30       	cpi	r24, 0x02	; 2
 504:	91 05       	cpc	r25, r1
 506:	d9 f0       	breq	.+54     	; 0x53e <PORTC_set_port_dir+0x56>
 508:	89 2b       	or	r24, r25
 50a:	09 f0       	breq	.+2      	; 0x50e <PORTC_set_port_dir+0x26>
		DDRC &= ~mask;

		PORTC |= mask;
		break;
	default:
		break;
 50c:	2f c0       	rjmp	.+94     	; 0x56c <PORTC_set_port_dir+0x84>
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~mask;
 50e:	87 e2       	ldi	r24, 0x27	; 39
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	27 e2       	ldi	r18, 0x27	; 39
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	f9 01       	movw	r30, r18
 518:	20 81       	ld	r18, Z
 51a:	32 2f       	mov	r19, r18
 51c:	29 81       	ldd	r18, Y+1	; 0x01
 51e:	20 95       	com	r18
 520:	23 23       	and	r18, r19
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18
		break;
 526:	22 c0       	rjmp	.+68     	; 0x56c <PORTC_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRC |= mask;
 528:	87 e2       	ldi	r24, 0x27	; 39
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	27 e2       	ldi	r18, 0x27	; 39
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	f9 01       	movw	r30, r18
 532:	30 81       	ld	r19, Z
 534:	29 81       	ldd	r18, Y+1	; 0x01
 536:	23 2b       	or	r18, r19
 538:	fc 01       	movw	r30, r24
 53a:	20 83       	st	Z, r18
		break;
 53c:	17 c0       	rjmp	.+46     	; 0x56c <PORTC_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 53e:	87 e2       	ldi	r24, 0x27	; 39
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	27 e2       	ldi	r18, 0x27	; 39
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	f9 01       	movw	r30, r18
 548:	20 81       	ld	r18, Z
 54a:	32 2f       	mov	r19, r18
 54c:	29 81       	ldd	r18, Y+1	; 0x01
 54e:	20 95       	com	r18
 550:	23 23       	and	r18, r19
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18

		PORTC |= mask;
 556:	88 e2       	ldi	r24, 0x28	; 40
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	28 e2       	ldi	r18, 0x28	; 40
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	f9 01       	movw	r30, r18
 560:	30 81       	ld	r19, Z
 562:	29 81       	ldd	r18, Y+1	; 0x01
 564:	23 2b       	or	r18, r19
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
		break;
 56a:	00 00       	nop
	default:
		break;
	}
}
 56c:	00 00       	nop
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <PORTD_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	00 d0       	rcall	.+0      	; 0x57e <PORTD_set_port_dir+0x6>
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
 582:	89 83       	std	Y+1, r24	; 0x01
 584:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 586:	8a 81       	ldd	r24, Y+2	; 0x02
 588:	88 2f       	mov	r24, r24
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	91 05       	cpc	r25, r1
 590:	99 f0       	breq	.+38     	; 0x5b8 <PORTD_set_port_dir+0x40>
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	91 05       	cpc	r25, r1
 596:	d9 f0       	breq	.+54     	; 0x5ce <PORTD_set_port_dir+0x56>
 598:	89 2b       	or	r24, r25
 59a:	09 f0       	breq	.+2      	; 0x59e <PORTD_set_port_dir+0x26>
		DDRD &= ~mask;

		PORTD |= mask;
		break;
	default:
		break;
 59c:	2f c0       	rjmp	.+94     	; 0x5fc <PORTD_set_port_dir+0x84>
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~mask;
 59e:	8a e2       	ldi	r24, 0x2A	; 42
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	2a e2       	ldi	r18, 0x2A	; 42
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	f9 01       	movw	r30, r18
 5a8:	20 81       	ld	r18, Z
 5aa:	32 2f       	mov	r19, r18
 5ac:	29 81       	ldd	r18, Y+1	; 0x01
 5ae:	20 95       	com	r18
 5b0:	23 23       	and	r18, r19
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
		break;
 5b6:	22 c0       	rjmp	.+68     	; 0x5fc <PORTD_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRD |= mask;
 5b8:	8a e2       	ldi	r24, 0x2A	; 42
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	2a e2       	ldi	r18, 0x2A	; 42
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	f9 01       	movw	r30, r18
 5c2:	30 81       	ld	r19, Z
 5c4:	29 81       	ldd	r18, Y+1	; 0x01
 5c6:	23 2b       	or	r18, r19
 5c8:	fc 01       	movw	r30, r24
 5ca:	20 83       	st	Z, r18
		break;
 5cc:	17 c0       	rjmp	.+46     	; 0x5fc <PORTD_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 5ce:	8a e2       	ldi	r24, 0x2A	; 42
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	2a e2       	ldi	r18, 0x2A	; 42
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	f9 01       	movw	r30, r18
 5d8:	20 81       	ld	r18, Z
 5da:	32 2f       	mov	r19, r18
 5dc:	29 81       	ldd	r18, Y+1	; 0x01
 5de:	20 95       	com	r18
 5e0:	23 23       	and	r18, r19
 5e2:	fc 01       	movw	r30, r24
 5e4:	20 83       	st	Z, r18

		PORTD |= mask;
 5e6:	8b e2       	ldi	r24, 0x2B	; 43
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	2b e2       	ldi	r18, 0x2B	; 43
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	f9 01       	movw	r30, r18
 5f0:	30 81       	ld	r19, Z
 5f2:	29 81       	ldd	r18, Y+1	; 0x01
 5f4:	23 2b       	or	r18, r19
 5f6:	fc 01       	movw	r30, r24
 5f8:	20 83       	st	Z, r18
		break;
 5fa:	00 00       	nop
	default:
		break;
	}
}
 5fc:	00 00       	nop
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	08 95       	ret

00000608 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	00 d0       	rcall	.+0      	; 0x60e <PORTD_set_pin_dir+0x6>
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
 612:	89 83       	std	Y+1, r24	; 0x01
 614:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 616:	8a 81       	ldd	r24, Y+2	; 0x02
 618:	88 2f       	mov	r24, r24
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	91 05       	cpc	r25, r1
 620:	e1 f0       	breq	.+56     	; 0x65a <PORTD_set_pin_dir+0x52>
 622:	82 30       	cpi	r24, 0x02	; 2
 624:	91 05       	cpc	r25, r1
 626:	71 f1       	breq	.+92     	; 0x684 <PORTD_set_pin_dir+0x7c>
 628:	89 2b       	or	r24, r25
 62a:	09 f0       	breq	.+2      	; 0x62e <PORTD_set_pin_dir+0x26>
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
		break;
	default:
		break;
 62c:	55 c0       	rjmp	.+170    	; 0x6d8 <PORTD_set_pin_dir+0xd0>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 62e:	8a e2       	ldi	r24, 0x2A	; 42
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	2a e2       	ldi	r18, 0x2A	; 42
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	f9 01       	movw	r30, r18
 638:	20 81       	ld	r18, Z
 63a:	62 2f       	mov	r22, r18
 63c:	29 81       	ldd	r18, Y+1	; 0x01
 63e:	42 2f       	mov	r20, r18
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <PORTD_set_pin_dir+0x44>
 648:	22 0f       	add	r18, r18
 64a:	33 1f       	adc	r19, r19
 64c:	4a 95       	dec	r20
 64e:	e2 f7       	brpl	.-8      	; 0x648 <PORTD_set_pin_dir+0x40>
 650:	20 95       	com	r18
 652:	26 23       	and	r18, r22
 654:	fc 01       	movw	r30, r24
 656:	20 83       	st	Z, r18
		break;
 658:	3f c0       	rjmp	.+126    	; 0x6d8 <PORTD_set_pin_dir+0xd0>
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 65a:	8a e2       	ldi	r24, 0x2A	; 42
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	2a e2       	ldi	r18, 0x2A	; 42
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	f9 01       	movw	r30, r18
 664:	20 81       	ld	r18, Z
 666:	62 2f       	mov	r22, r18
 668:	29 81       	ldd	r18, Y+1	; 0x01
 66a:	42 2f       	mov	r20, r18
 66c:	50 e0       	ldi	r21, 0x00	; 0
 66e:	21 e0       	ldi	r18, 0x01	; 1
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <PORTD_set_pin_dir+0x70>
 674:	22 0f       	add	r18, r18
 676:	33 1f       	adc	r19, r19
 678:	4a 95       	dec	r20
 67a:	e2 f7       	brpl	.-8      	; 0x674 <PORTD_set_pin_dir+0x6c>
 67c:	26 2b       	or	r18, r22
 67e:	fc 01       	movw	r30, r24
 680:	20 83       	st	Z, r18
		break;
 682:	2a c0       	rjmp	.+84     	; 0x6d8 <PORTD_set_pin_dir+0xd0>
	case PORT_DIR_OFF:
		DDRD &= ~(1 << pin);
 684:	8a e2       	ldi	r24, 0x2A	; 42
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	2a e2       	ldi	r18, 0x2A	; 42
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	f9 01       	movw	r30, r18
 68e:	20 81       	ld	r18, Z
 690:	62 2f       	mov	r22, r18
 692:	29 81       	ldd	r18, Y+1	; 0x01
 694:	42 2f       	mov	r20, r18
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	21 e0       	ldi	r18, 0x01	; 1
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <PORTD_set_pin_dir+0x9a>
 69e:	22 0f       	add	r18, r18
 6a0:	33 1f       	adc	r19, r19
 6a2:	4a 95       	dec	r20
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <PORTD_set_pin_dir+0x96>
 6a6:	20 95       	com	r18
 6a8:	26 23       	and	r18, r22
 6aa:	fc 01       	movw	r30, r24
 6ac:	20 83       	st	Z, r18

		PORTD |= 1 << pin;
 6ae:	8b e2       	ldi	r24, 0x2B	; 43
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	2b e2       	ldi	r18, 0x2B	; 43
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	f9 01       	movw	r30, r18
 6b8:	20 81       	ld	r18, Z
 6ba:	62 2f       	mov	r22, r18
 6bc:	29 81       	ldd	r18, Y+1	; 0x01
 6be:	42 2f       	mov	r20, r18
 6c0:	50 e0       	ldi	r21, 0x00	; 0
 6c2:	21 e0       	ldi	r18, 0x01	; 1
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <PORTD_set_pin_dir+0xc4>
 6c8:	22 0f       	add	r18, r18
 6ca:	33 1f       	adc	r19, r19
 6cc:	4a 95       	dec	r20
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <PORTD_set_pin_dir+0xc0>
 6d0:	26 2b       	or	r18, r22
 6d2:	fc 01       	movw	r30, r24
 6d4:	20 83       	st	Z, r18
		break;
 6d6:	00 00       	nop
	default:
		break;
	}
}
 6d8:	00 00       	nop
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	00 d0       	rcall	.+0      	; 0x6ea <PORTD_set_pin_level+0x6>
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62
 6ee:	89 83       	std	Y+1, r24	; 0x01
 6f0:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
 6f2:	8a 81       	ldd	r24, Y+2	; 0x02
 6f4:	88 23       	and	r24, r24
 6f6:	a9 f0       	breq	.+42     	; 0x722 <PORTD_set_pin_level+0x3e>
		PORTD |= 1 << pin;
 6f8:	8b e2       	ldi	r24, 0x2B	; 43
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	2b e2       	ldi	r18, 0x2B	; 43
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	f9 01       	movw	r30, r18
 702:	20 81       	ld	r18, Z
 704:	62 2f       	mov	r22, r18
 706:	29 81       	ldd	r18, Y+1	; 0x01
 708:	42 2f       	mov	r20, r18
 70a:	50 e0       	ldi	r21, 0x00	; 0
 70c:	21 e0       	ldi	r18, 0x01	; 1
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	02 c0       	rjmp	.+4      	; 0x716 <PORTD_set_pin_level+0x32>
 712:	22 0f       	add	r18, r18
 714:	33 1f       	adc	r19, r19
 716:	4a 95       	dec	r20
 718:	e2 f7       	brpl	.-8      	; 0x712 <PORTD_set_pin_level+0x2e>
 71a:	26 2b       	or	r18, r22
 71c:	fc 01       	movw	r30, r24
 71e:	20 83       	st	Z, r18
	} else {
		PORTD &= ~(1 << pin);
	}
}
 720:	15 c0       	rjmp	.+42     	; 0x74c <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 722:	8b e2       	ldi	r24, 0x2B	; 43
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	2b e2       	ldi	r18, 0x2B	; 43
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	f9 01       	movw	r30, r18
 72c:	20 81       	ld	r18, Z
 72e:	62 2f       	mov	r22, r18
 730:	29 81       	ldd	r18, Y+1	; 0x01
 732:	42 2f       	mov	r20, r18
 734:	50 e0       	ldi	r21, 0x00	; 0
 736:	21 e0       	ldi	r18, 0x01	; 1
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <PORTD_set_pin_level+0x5c>
 73c:	22 0f       	add	r18, r18
 73e:	33 1f       	adc	r19, r19
 740:	4a 95       	dec	r20
 742:	e2 f7       	brpl	.-8      	; 0x73c <PORTD_set_pin_level+0x58>
 744:	20 95       	com	r18
 746:	26 23       	and	r18, r22
 748:	fc 01       	movw	r30, r24
 74a:	20 83       	st	Z, r18
	}
}
 74c:	00 00       	nop
 74e:	0f 90       	pop	r0
 750:	0f 90       	pop	r0
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	08 95       	ret

00000758 <PORTE_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTE_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	00 d0       	rcall	.+0      	; 0x75e <PORTE_set_port_dir+0x6>
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62
 762:	89 83       	std	Y+1, r24	; 0x01
 764:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 766:	8a 81       	ldd	r24, Y+2	; 0x02
 768:	88 2f       	mov	r24, r24
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	81 30       	cpi	r24, 0x01	; 1
 76e:	91 05       	cpc	r25, r1
 770:	99 f0       	breq	.+38     	; 0x798 <PORTE_set_port_dir+0x40>
 772:	82 30       	cpi	r24, 0x02	; 2
 774:	91 05       	cpc	r25, r1
 776:	d9 f0       	breq	.+54     	; 0x7ae <PORTE_set_port_dir+0x56>
 778:	89 2b       	or	r24, r25
 77a:	09 f0       	breq	.+2      	; 0x77e <PORTE_set_port_dir+0x26>
		DDRE &= ~mask;

		PORTE |= mask;
		break;
	default:
		break;
 77c:	2f c0       	rjmp	.+94     	; 0x7dc <PORTE_set_port_dir+0x84>
 */
static inline void PORTE_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~mask;
 77e:	8d e2       	ldi	r24, 0x2D	; 45
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	2d e2       	ldi	r18, 0x2D	; 45
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	f9 01       	movw	r30, r18
 788:	20 81       	ld	r18, Z
 78a:	32 2f       	mov	r19, r18
 78c:	29 81       	ldd	r18, Y+1	; 0x01
 78e:	20 95       	com	r18
 790:	23 23       	and	r18, r19
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18
		break;
 796:	22 c0       	rjmp	.+68     	; 0x7dc <PORTE_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRE |= mask;
 798:	8d e2       	ldi	r24, 0x2D	; 45
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	2d e2       	ldi	r18, 0x2D	; 45
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	f9 01       	movw	r30, r18
 7a2:	30 81       	ld	r19, Z
 7a4:	29 81       	ldd	r18, Y+1	; 0x01
 7a6:	23 2b       	or	r18, r19
 7a8:	fc 01       	movw	r30, r24
 7aa:	20 83       	st	Z, r18
		break;
 7ac:	17 c0       	rjmp	.+46     	; 0x7dc <PORTE_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 7ae:	8d e2       	ldi	r24, 0x2D	; 45
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	2d e2       	ldi	r18, 0x2D	; 45
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	f9 01       	movw	r30, r18
 7b8:	20 81       	ld	r18, Z
 7ba:	32 2f       	mov	r19, r18
 7bc:	29 81       	ldd	r18, Y+1	; 0x01
 7be:	20 95       	com	r18
 7c0:	23 23       	and	r18, r19
 7c2:	fc 01       	movw	r30, r24
 7c4:	20 83       	st	Z, r18

		PORTE |= mask;
 7c6:	8e e2       	ldi	r24, 0x2E	; 46
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	2e e2       	ldi	r18, 0x2E	; 46
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	f9 01       	movw	r30, r18
 7d0:	30 81       	ld	r19, Z
 7d2:	29 81       	ldd	r18, Y+1	; 0x01
 7d4:	23 2b       	or	r18, r19
 7d6:	fc 01       	movw	r30, r24
 7d8:	20 83       	st	Z, r18
		break;
 7da:	00 00       	nop
	default:
		break;
	}
}
 7dc:	00 00       	nop
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <Button_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void Button_set_pull_mode(const enum port_pull_mode pull_mode)
{
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	1f 92       	push	r1
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
 7f2:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_pull_mode(7, pull_mode);
 7f4:	69 81       	ldd	r22, Y+1	; 0x01
 7f6:	87 e0       	ldi	r24, 0x07	; 7
 7f8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PORTB_set_pin_pull_mode>
}
 7fc:	00 00       	nop
 7fe:	0f 90       	pop	r0
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	08 95       	ret

00000806 <Button_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void Button_set_dir(const enum port_dir dir)
{
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	1f 92       	push	r1
 80c:	cd b7       	in	r28, 0x3d	; 61
 80e:	de b7       	in	r29, 0x3e	; 62
 810:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(7, dir);
 812:	69 81       	ldd	r22, Y+1	; 0x01
 814:	87 e0       	ldi	r24, 0x07	; 7
 816:	0e 94 06 02 	call	0x40c	; 0x40c <PORTB_set_pin_dir>
}
 81a:	00 00       	nop
 81c:	0f 90       	pop	r0
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	08 95       	ret

00000824 <MyGpio_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void MyGpio_set_dir(const enum port_dir dir)
{
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	1f 92       	push	r1
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
 82e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(7, dir);
 830:	69 81       	ldd	r22, Y+1	; 0x01
 832:	87 e0       	ldi	r24, 0x07	; 7
 834:	0e 94 04 03 	call	0x608	; 0x608 <PORTD_set_pin_dir>
}
 838:	00 00       	nop
 83a:	0f 90       	pop	r0
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <MyGpio_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void MyGpio_set_level(const bool level)
{
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	1f 92       	push	r1
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
 84c:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(7, level);
 84e:	69 81       	ldd	r22, Y+1	; 0x01
 850:	87 e0       	ldi	r24, 0x07	; 7
 852:	0e 94 72 03 	call	0x6e4	; 0x6e4 <PORTD_set_pin_level>
}
 856:	00 00       	nop
 858:	0f 90       	pop	r0
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <sysctrl_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	cd b7       	in	r28, 0x3d	; 61
 866:	de b7       	in	r29, 0x3e	; 62
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 868:	40 e0       	ldi	r20, 0x00	; 0
 86a:	60 e8       	ldi	r22, 0x80	; 128
 86c:	81 e6       	ldi	r24, 0x61	; 97
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 80 04 	call	0x900	; 0x900 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 874:	83 e5       	ldi	r24, 0x53	; 83
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	fc 01       	movw	r30, r24
 87a:	10 82       	st	Z, r1
	       (0 << SE);

	MCUCR = (0 << PUD);
 87c:	85 e5       	ldi	r24, 0x55	; 85
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	fc 01       	movw	r30, r24
 882:	10 82       	st	Z, r1

	return 0;
 884:	80 e0       	ldi	r24, 0x00	; 0
}
 886:	df 91       	pop	r29
 888:	cf 91       	pop	r28
 88a:	08 95       	ret

0000088c <mcu_init>:
#define MCU_RESET_CAUSE_EXT (1 << EXTRF)
#define MCU_RESET_CAUSE_BOR (1 << BORF)
#define MCU_RESET_CAUSE_WDT (1 << WDRF)

static inline void mcu_init(void)
{
 88c:	cf 93       	push	r28
 88e:	df 93       	push	r29
 890:	cd b7       	in	r28, 0x3d	; 61
 892:	de b7       	in	r29, 0x3e	; 62
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 894:	85 e6       	ldi	r24, 0x65	; 101
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	2d e3       	ldi	r18, 0x3D	; 61
 89a:	fc 01       	movw	r30, r24
 89c:	20 83       	st	Z, r18

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 89e:	84 e6       	ldi	r24, 0x64	; 100
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	2f ef       	ldi	r18, 0xFF	; 255
 8a4:	fc 01       	movw	r30, r24
 8a6:	20 83       	st	Z, r18
	       | (1 << PRADC) | (1 << PRSPI0);

	/* Set all pins to low power mode */
	PORTB_set_port_dir(0xff, PORT_DIR_OFF);
 8a8:	62 e0       	ldi	r22, 0x02	; 2
 8aa:	8f ef       	ldi	r24, 0xFF	; 255
 8ac:	0e 94 be 01 	call	0x37c	; 0x37c <PORTB_set_port_dir>
	PORTC_set_port_dir(0x7f, PORT_DIR_OFF);
 8b0:	62 e0       	ldi	r22, 0x02	; 2
 8b2:	8f e7       	ldi	r24, 0x7F	; 127
 8b4:	0e 94 74 02 	call	0x4e8	; 0x4e8 <PORTC_set_port_dir>
	PORTD_set_port_dir(0xff, PORT_DIR_OFF);
 8b8:	62 e0       	ldi	r22, 0x02	; 2
 8ba:	8f ef       	ldi	r24, 0xFF	; 255
 8bc:	0e 94 bc 02 	call	0x578	; 0x578 <PORTD_set_port_dir>
	PORTE_set_port_dir(0x0f, PORT_DIR_OFF);
 8c0:	62 e0       	ldi	r22, 0x02	; 2
 8c2:	8f e0       	ldi	r24, 0x0F	; 15
 8c4:	0e 94 ac 03 	call	0x758	; 0x758 <PORTE_set_port_dir>
}
 8c8:	00 00       	nop
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	08 95       	ret

000008d0 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	cd b7       	in	r28, 0x3d	; 61
 8d6:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 8d8:	0e 94 46 04 	call	0x88c	; 0x88c <mcu_init>

	/* PORT setting on PB7 */

	// Set pin direction to input
	Button_set_dir(PORT_DIR_IN);
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	0e 94 03 04 	call	0x806	; 0x806 <Button_set_dir>

	Button_set_pull_mode(
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Button_set_pull_mode>
	    PORT_PULL_OFF);

	/* PORT setting on PD7 */

	// Set pin direction to output
	MyGpio_set_dir(PORT_DIR_OUT);
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	0e 94 12 04 	call	0x824	; 0x824 <MyGpio_set_dir>

	MyGpio_set_level(
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	0e 94 21 04 	call	0x842	; 0x842 <MyGpio_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	sysctrl_init();
 8f4:	0e 94 30 04 	call	0x860	; 0x860 <sysctrl_init>
}
 8f8:	00 00       	nop
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	08 95       	ret

00000900 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 900:	2f b7       	in	r18, 0x3f	; 63
	cli
 902:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 904:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 906:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 908:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 90a:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 90c:	08 95       	ret

0000090e <_exit>:
 90e:	f8 94       	cli

00000910 <__stop_program>:
 910:	ff cf       	rjmp	.-2      	; 0x910 <__stop_program>
